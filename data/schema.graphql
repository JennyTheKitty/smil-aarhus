input AuthenticateInput {
  password: String!
  username: String!
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean
}

"""All input for the create `Image` mutation."""
input CreateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Image` to be created by this mutation."""
  image: ImageInput!
}

"""The output of our create `Image` mutation."""
type CreateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was created by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `News` mutation."""
input CreateNewsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `News` to be created by this mutation."""
  news: NewsInput!
}

"""The output of our create `News` mutation."""
type CreateNewsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `News` that was created by this mutation."""
  news: News

  """An edge for our `News`. May be used by Relay 1."""
  newsEdge(
    """The method to use when ordering `News`."""
    orderBy: [NewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Page` mutation."""
input CreatePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Page` to be created by this mutation."""
  page: PageInput!
}

"""The output of our create `Page` mutation."""
type CreatePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Page` that was created by this mutation."""
  page: Page

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Picture` mutation."""
input CreatePictureInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Picture` to be created by this mutation."""
  picture: PictureInput!
}

"""The output of our create `Picture` mutation."""
type CreatePicturePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Image` that is related to this `Picture`."""
  imageByImage: Image

  """The `Picture` that was created by this mutation."""
  picture: Picture

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createUploadUrl` mutation."""
input CreateUploadUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  You must provide the content type (or MIME type) of the content you intend
  to upload. For further information about content types, see
  https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
  """
  contentType: String!
}

"""The output of our `createUploadUrl` mutation."""
type CreateUploadUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Use this formdata when uploading"""
  formData: String!

  """Create the image under this ID"""
  id: UUID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Upload content to this signed URL."""
  uploadUrl: String!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime
}

"""All input for the `deleteImage` mutation."""
input DeleteImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Image` mutation."""
type DeleteImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedImageNodeId: ID

  """The `Image` that was deleted by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNews` mutation."""
input DeleteNewsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `News` mutation."""
type DeleteNewsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNewsNodeId: ID

  """The `News` that was deleted by this mutation."""
  news: News

  """An edge for our `News`. May be used by Relay 1."""
  newsEdge(
    """The method to use when ordering `News`."""
    orderBy: [NewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePage` mutation."""
input DeletePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Page` mutation."""
type DeletePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPageNodeId: ID

  """The `Page` that was deleted by this mutation."""
  page: Page

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePicture` mutation."""
input DeletePictureInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Picture` mutation."""
type DeletePicturePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPictureNodeId: ID

  """Reads a single `Image` that is related to this `Picture`."""
  imageByImage: Image

  """The `Picture` that was deleted by this mutation."""
  picture: Picture

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Event {
  endsAt: Datetime!

  """Reads and enables pagination through a set of `EventViaGroup`."""
  groups(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventViaGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventViaGroup!]!
  id: UUID!

  """Reads a single `Image` that is related to this `Event`."""
  imageByOverrideImage: Image
  img: ResponsiveImage
  overrideImage: UUID
  special: Boolean!
  startsAt: Datetime!

  """Reads and enables pagination through a set of `EventViaEventTag`."""
  tags(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventViaEventTag!]!
  templateName: String

  """Reads and enables pagination through a set of `EventTr`."""
  translations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventTr!]!
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `endsAt` field."""
  endsAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `overrideImage` field."""
  overrideImage: UUID

  """Checks for equality with the object’s `special` field."""
  special: Boolean

  """Checks for equality with the object’s `startsAt` field."""
  startsAt: Datetime

  """Checks for equality with the object’s `templateName` field."""
  templateName: String
}

"""An input for mutations affecting `EventDatum`"""
input EventDatumInput {
  endsAt: Datetime!
  groupIds: [UUID]
  overrideImage: UUID
  special: Boolean!
  startsAt: Datetime!
  tagIds: [UUID]
  templateName: String
}

"""
A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’
"""
input EventFilter {
  """Filter by the object’s `endsAt` field."""
  endsAt: DatetimeFilter

  """Filter by the object’s `special` field."""
  special: BooleanFilter

  """Filter by the object’s `startsAt` field."""
  startsAt: DatetimeFilter

  """Filter by the object’s `templateName` field."""
  templateName: StringFilter
}

type EventTag {
  """Reads and enables pagination through a set of `EventViaEventTag`."""
  events(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventViaEventTag!]!
  id: UUID!
  image: UUID

  """Reads a single `Image` that is related to this `EventTag`."""
  imageByImage: Image
  img: ResponsiveImage

  """Reads and enables pagination through a set of `EventTagTr`."""
  translations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventTagTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventTagTr!]!
}

"""
A condition to be used against `EventTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EventTagCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `image` field."""
  image: UUID
}

"""An input for mutations affecting `EventTagDatum`"""
input EventTagDatumInput {
  image: UUID
  imageCredit: String
}

type EventTagTr {
  languageCode: TrLanguage!

  """Reads a single `EventTag` that is related to this `EventTagTr`."""
  tag: EventTag
  tagId: UUID!
  title: String!
}

"""
A condition to be used against `EventTagTr` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EventTagTrCondition {
  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `tagId` field."""
  tagId: UUID

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""An input for mutations affecting `EventTagTrDatum`"""
input EventTagTrDatumInput {
  languageCode: String!
  title: String!
}

"""
A filter to be used against `EventTagTr` object types. All fields are combined with a logical ‘and.’
"""
input EventTagTrFilter {
  """Filter by the object’s `title` field."""
  title: StringFilter
}

"""A connection to a list of `EventTag` values."""
type EventTagsConnection {
  """
  A list of edges which contains the `EventTag` and cursor to aid in pagination.
  """
  edges: [EventTagsEdge!]!

  """A list of `EventTag` objects."""
  nodes: [EventTag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventTag` you could get from the connection."""
  totalCount: Int!
}

"""A `EventTag` edge in the connection."""
type EventTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventTag` at the end of the edge."""
  node: EventTag!
}

"""Methods to use when ordering `EventTag`."""
enum EventTagsOrderBy {
  ID_ASC
  ID_DESC
  IMAGE_ASC
  IMAGE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EventTr {
  description: String!

  """Reads a single `Event` that is related to this `EventTr`."""
  event: Event
  eventId: UUID!
  languageCode: TrLanguage!
  slug: String!
  title: String!
}

"""
A condition to be used against `EventTr` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventTrCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""An input for mutations affecting `EventTrDatum`"""
input EventTrDatumInput {
  description: String!
  languageCode: String!
  title: String!
}

"""
A filter to be used against `EventTr` object types. All fields are combined with a logical ‘and.’
"""
input EventTrFilter {
  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter
}

type EventViaEventTag {
  """Reads a single `Event` that is related to this `EventViaEventTag`."""
  event: Event
  eventId: UUID!

  """Reads a single `EventTag` that is related to this `EventViaEventTag`."""
  tag: EventTag
  tagId: UUID!
}

type EventViaGroup {
  """Reads a single `Event` that is related to this `EventViaGroup`."""
  event: Event
  eventId: UUID!

  """Reads a single `Group` that is related to this `EventViaGroup`."""
  group: Group
  groupId: UUID!
}

"""
A condition to be used against `EventViaGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventViaGroupCondition {
  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  ENDS_AT_ASC
  ENDS_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OVERRIDE_IMAGE_ASC
  OVERRIDE_IMAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SPECIAL_ASC
  SPECIAL_DESC
  STARTS_AT_ASC
  STARTS_AT_DESC
  TEMPLATE_NAME_ASC
  TEMPLATE_NAME_DESC
}

type Group {
  """Reads and enables pagination through a set of `EventViaGroup`."""
  events(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventViaGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventViaGroup!]!
  id: UUID!
  image: UUID

  """Reads a single `Image` that is related to this `Group`."""
  imageByImage: Image
  img: ResponsiveImage
  isOpen: Boolean!

  """Reads and enables pagination through a set of `GroupTr`."""
  translations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [GroupTr!]!
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `image` field."""
  image: UUID

  """Checks for equality with the object’s `isOpen` field."""
  isOpen: Boolean
}

"""An input for mutations affecting `GroupDatum`"""
input GroupDatumInput {
  image: UUID!
  imageCredit: String!
  isOpen: Boolean!
}

"""
A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’
"""
input GroupFilter {
  """Filter by the object’s `isOpen` field."""
  isOpen: BooleanFilter
}

type GroupTr {
  activity: String!
  description: String!

  """Reads a single `Group` that is related to this `GroupTr`."""
  group: Group
  groupId: UUID!
  languageCode: TrLanguage!
  shortDescription: String!
  slug: String
  title: String!
}

"""
A condition to be used against `GroupTr` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupTrCondition {
  """Checks for equality with the object’s `activity` field."""
  activity: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID

  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `shortDescription` field."""
  shortDescription: String

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""An input for mutations affecting `GroupTrDatum`"""
input GroupTrDatumInput {
  activity: String!
  description: String!
  languageCode: String!
  shortDescription: String!
  title: String!
}

"""
A filter to be used against `GroupTr` object types. All fields are combined with a logical ‘and.’
"""
input GroupTrFilter {
  """Filter by the object’s `activity` field."""
  activity: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `shortDescription` field."""
  shortDescription: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  ID_ASC
  ID_DESC
  IMAGE_ASC
  IMAGE_DESC
  IS_OPEN_ASC
  IS_OPEN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Image {
  credit: String!

  """Reads and enables pagination through a set of `EventTag`."""
  eventTagsByImage(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!]
  ): [EventTag!]!

  """Reads and enables pagination through a set of `EventTag`."""
  eventTagsByImageConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTagsConnection!

  """Reads and enables pagination through a set of `Event`."""
  eventsByOverrideImage(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!]
  ): [Event!]!

  """Reads and enables pagination through a set of `Group`."""
  groupsByImage(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!
  height: Int!
  id: UUID!
  img: ResponsiveImage
  path: String!

  """Reads and enables pagination through a set of `Picture`."""
  picturesByImage(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Picture`."""
    orderBy: [PicturesOrderBy!]
  ): [Picture!]!
  width: Int!
}

"""An input for mutations affecting `Image`"""
input ImageInput {
  credit: String!
  height: Int!
  id: UUID
  path: String!
  width: Int!
}

"""
Represents an update to a `Image`. Fields that are set will be updated.
"""
input ImagePatch {
  credit: String
  height: Int
  id: UUID
  path: String
  width: Int
}

type InfoPage {
  icon: String!
  id: UUID!

  """Reads a single `Page` that is related to this `InfoPage`."""
  pageById: Page
  rank: Int!

  """Reads and enables pagination through a set of `InfoPageTr`."""
  translations(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [InfoPageTr!]!
}

"""An input for mutations affecting `InfoPageDatum`"""
input InfoPageDatumInput {
  icon: String!
}

type InfoPageTr {
  """Reads a single `InfoPage` that is related to this `InfoPageTr`."""
  infoPage: InfoPage
  infoPageId: UUID!
  languageCode: TrLanguage!
  slug: String
  subtitle: String!
  title: String!
}

"""An input for mutations affecting `InfoPageTrDatum`"""
input InfoPageTrDatumInput {
  languageCode: String!
  subtitle: String!
  title: String!
}

"""Methods to use when ordering `InfoPage`."""
enum InfoPagesOrderBy {
  ICON_ASC
  ICON_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RANK_ASC
  RANK_DESC
}

type Member {
  id: UUID!
  isActive: Boolean!
  name: String!
  userRole: String!
  username: String!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): String!

  """Creates a single `Image`."""
  createImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImageInput!
  ): CreateImagePayload

  """Creates a single `News`."""
  createNews(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNewsInput!
  ): CreateNewsPayload

  """Creates a single `Page`."""
  createPage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePageInput!
  ): CreatePagePayload

  """Creates a single `Picture`."""
  createPicture(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePictureInput!
  ): CreatePicturePayload

  """Get a signed URL for uploading files. It will expire in 5 minutes."""
  createUploadUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUploadUrlInput!
  ): CreateUploadUrlPayload

  """Deletes a single `Image` using a unique key."""
  deleteImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageInput!
  ): DeleteImagePayload

  """Deletes a single `News` using a unique key."""
  deleteNews(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNewsInput!
  ): DeleteNewsPayload

  """Deletes a single `Page` using a unique key."""
  deletePage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageInput!
  ): DeletePagePayload

  """Deletes a single `Picture` using a unique key."""
  deletePicture(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePictureInput!
  ): DeletePicturePayload
  logout: Boolean
  reorderPictures(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ReorderPicturesInput!
  ): ReorderPicturesPayload

  """Updates a single `Image` using a unique key and a patch."""
  updateImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageInput!
  ): UpdateImagePayload

  """Updates a single `News` using a unique key and a patch."""
  updateNews(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNewsInput!
  ): UpdateNewsPayload

  """Updates a single `Page` using a unique key and a patch."""
  updatePage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageInput!
  ): UpdatePagePayload

  """Updates a single `PageTr` using a unique key and a patch."""
  updatePageTr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageTrInput!
  ): UpdatePageTrPayload

  """Updates a single `Picture` using a unique key and a patch."""
  updatePicture(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePictureInput!
  ): UpdatePicturePayload
  upsertEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertEventInput!
  ): UpsertEventPayload
  upsertEventTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertEventTagInput!
  ): UpsertEventTagPayload
  upsertGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertGroupInput!
  ): UpsertGroupPayload
  upsertInfoPage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertInfoPageInput!
  ): UpsertInfoPagePayload
}

type News {
  id: UUID!
  publishedAt: Datetime!

  """Reads and enables pagination through a set of `NewsTr`."""
  translations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NewsTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [NewsTr!]!
  updatedAt: Datetime!
}

"""
A condition to be used against `News` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NewsCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `publishedAt` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `News` values."""
type NewsConnection {
  """
  A list of edges which contains the `News` and cursor to aid in pagination.
  """
  edges: [NewsEdge!]!

  """A list of `News` objects."""
  nodes: [News!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `News` you could get from the connection."""
  totalCount: Int!
}

"""A `News` edge in the connection."""
type NewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `News` at the end of the edge."""
  node: News!
}

"""
A filter to be used against `News` object types. All fields are combined with a logical ‘and.’
"""
input NewsFilter {
  """Filter by the object’s `publishedAt` field."""
  publishedAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `News`"""
input NewsInput {
  id: UUID!
  publishedAt: Datetime!
  updatedAt: Datetime!
}

"""Methods to use when ordering `News`."""
enum NewsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Represents an update to a `News`. Fields that are set will be updated."""
input NewsPatch {
  id: UUID
  publishedAt: Datetime
  updatedAt: Datetime
}

type NewsTr {
  content: String!
  languageCode: TrLanguage!

  """Reads a single `News` that is related to this `NewsTr`."""
  news: News
  newsId: UUID!
  title: String!
}

"""
A condition to be used against `NewsTr` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NewsTrCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `newsId` field."""
  newsId: UUID

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""
A filter to be used against `NewsTr` object types. All fields are combined with a logical ‘and.’
"""
input NewsTrFilter {
  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter
}

type Page {
  id: UUID!

  """Reads a single `InfoPage` that is related to this `Page`."""
  infoPageById: InfoPage

  """Reads and enables pagination through a set of `PageTr`."""
  translations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [PageTr!]!
}

"""
A condition to be used against `Page` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PageCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""An input for mutations affecting `Page`"""
input PageInput {
  id: UUID
}

"""Represents an update to a `Page`. Fields that are set will be updated."""
input PagePatch {
  id: UUID
}

type PageTr {
  content: String!
  languageCode: TrLanguage!

  """Reads a single `Page` that is related to this `PageTr`."""
  page: Page
  pageId: UUID!
}

"""
A condition to be used against `PageTr` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PageTrCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `pageId` field."""
  pageId: UUID
}

"""
A filter to be used against `PageTr` object types. All fields are combined with a logical ‘and.’
"""
input PageTrFilter {
  """Filter by the object’s `content` field."""
  content: StringFilter
}

"""
Represents an update to a `PageTr`. Fields that are set will be updated.
"""
input PageTrPatch {
  content: String
  languageCode: TrLanguage
  pageId: UUID
}

"""Methods to use when ordering `Page`."""
enum PagesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Picture {
  allowOnHome: Boolean!
  id: UUID!
  image: UUID!

  """Reads a single `Image` that is related to this `Picture`."""
  imageByImage: Image
  img: ResponsiveImage
  rank: Int!
}

"""An input for mutations affecting `Picture`"""
input PictureInput {
  allowOnHome: Boolean
  id: UUID
  image: UUID!
  rank: Int
}

"""
Represents an update to a `Picture`. Fields that are set will be updated.
"""
input PicturePatch {
  allowOnHome: Boolean
  id: UUID
  image: UUID
  rank: Int
}

"""Methods to use when ordering `Picture`."""
enum PicturesOrderBy {
  ALLOW_ON_HOME_ASC
  ALLOW_ON_HOME_DESC
  ID_ASC
  ID_DESC
  IMAGE_ASC
  IMAGE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RANK_ASC
  RANK_DESC
}

"""The root query type which gives access points into the data universe."""
type Query {
  currentMember: Member
  event(id: UUID!): Event
  eventBySlug(preferredLanguageCode: String!, slug: String!): Event
  eventTag(id: UUID!): EventTag
  eventTagTr(languageCode: TrLanguage!, tagId: UUID!): EventTagTr

  """Reads a set of `EventTag`."""
  eventTags(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!]
  ): [EventTag!]

  """Reads and enables pagination through a set of `EventTag`."""
  eventTagsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTagsConnection
  eventTr(eventId: UUID!, languageCode: TrLanguage!): EventTr
  eventTrBySlugAndLanguageCode(languageCode: TrLanguage!, slug: String!): EventTr
  eventViaEventTag(eventId: UUID!, tagId: UUID!): EventViaEventTag
  eventViaGroup(eventId: UUID!, groupId: UUID!): EventViaGroup

  """Reads a set of `Event`."""
  events(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!]
  ): [Event!]

  """Reads and enables pagination through a set of `Event`."""
  eventsByGroup(
    """Only read the first `n` values of the set."""
    first: Int
    groupId: UUID!

    """Skip the first `n` values."""
    offset: Int
  ): [Event!]
  group(id: UUID!): Group
  groupBySlug(preferredLanguageCode: String!, slug: String!): Group
  groupTr(groupId: UUID!, languageCode: TrLanguage!): GroupTr

  """Reads a set of `Group`."""
  groups(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]
  image(id: UUID!): Image
  infoPage(id: UUID!): InfoPage
  infoPageTr(infoPageId: UUID!, languageCode: TrLanguage!): InfoPageTr

  """Reads a set of `InfoPage`."""
  infoPages(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `InfoPage`."""
    orderBy: [InfoPagesOrderBy!]
  ): [InfoPage!]
  news(id: UUID!): News
  newsTr(languageCode: TrLanguage!, newsId: UUID!): NewsTr

  """Reads a set of `News`."""
  newses(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NewsFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `News`."""
    orderBy: [NewsOrderBy!]
  ): [News!]

  """Reads and enables pagination through a set of `News`."""
  newsesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NewsFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `News`."""
    orderBy: [NewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsConnection
  page(id: UUID!): Page
  pageTr(languageCode: TrLanguage!, pageId: UUID!): PageTr

  """Reads a set of `Page`."""
  pages(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!]
  ): [Page!]
  picture(id: UUID!): Picture

  """Reads a set of `Picture`."""
  pictures(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Picture`."""
    orderBy: [PicturesOrderBy!]
  ): [Picture!]

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `Picture`."""
  randomPictures(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Picture!]

  """Reads and enables pagination through a set of `EventTag`."""
  searchEventTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    query: String!
  ): [EventTag!]

  """Reads and enables pagination through a set of `Event`."""
  searchEventTemplates(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    query: String!
  ): [Event!]

  """Reads and enables pagination through a set of `Group`."""
  searchGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    query: String!
  ): [Group!]
}

"""All input for the `reorderPictures` mutation."""
input ReorderPicturesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  reorders: [ReorderPicturesReorderInput]!
}

"""The output of our `reorderPictures` mutation."""
type ReorderPicturesPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""An input for mutations affecting `ReorderPicturesReorder`"""
input ReorderPicturesReorderInput {
  fromRank: Int
  toRank: Int
}

type ResponsiveImage {
  credit: String!
  height: Int!
  src: String!
  srcSetJpeg: String!
  srcSetWebp: String!
  width: Int!
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """Equal to the specified value."""
  equalTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Not equal to the specified value."""
  notEqualTo: String
}

enum TrLanguage {
  DA
  EN
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateImage` mutation."""
input UpdateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  patch: ImagePatch!
}

"""The output of our update `Image` mutation."""
type UpdateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was updated by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNews` mutation."""
input UpdateNewsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `News` being updated.
  """
  patch: NewsPatch!
}

"""The output of our update `News` mutation."""
type UpdateNewsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `News` that was updated by this mutation."""
  news: News

  """An edge for our `News`. May be used by Relay 1."""
  newsEdge(
    """The method to use when ordering `News`."""
    orderBy: [NewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePage` mutation."""
input UpdatePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Page` being updated.
  """
  patch: PagePatch!
}

"""The output of our update `Page` mutation."""
type UpdatePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Page` that was updated by this mutation."""
  page: Page

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePageTr` mutation."""
input UpdatePageTrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  languageCode: TrLanguage!
  pageId: UUID!

  """
  An object where the defined keys will be set on the `PageTr` being updated.
  """
  patch: PageTrPatch!
}

"""The output of our update `PageTr` mutation."""
type UpdatePageTrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Page` that is related to this `PageTr`."""
  page: Page

  """The `PageTr` that was updated by this mutation."""
  pageTr: PageTr

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePicture` mutation."""
input UpdatePictureInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Picture` being updated.
  """
  patch: PicturePatch!
}

"""The output of our update `Picture` mutation."""
type UpdatePicturePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Image` that is related to this `Picture`."""
  imageByImage: Image

  """The `Picture` that was updated by this mutation."""
  picture: Picture

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `upsertEvent` mutation."""
input UpsertEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  data: EventDatumInput!
  eventId: UUID
  translations: [EventTrDatumInput]!
}

"""The output of our `upsertEvent` mutation."""
type UpsertEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  event: Event

  """Reads a single `Image` that is related to this `Event`."""
  imageByOverrideImage: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `upsertEventTag` mutation."""
input UpsertEventTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  data: EventTagDatumInput!
  eventTagId: UUID
  translations: [EventTagTrDatumInput]!
}

"""The output of our `upsertEventTag` mutation."""
type UpsertEventTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  eventTag: EventTag

  """An edge for our `EventTag`. May be used by Relay 1."""
  eventTagEdge(
    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTagsEdge

  """Reads a single `Image` that is related to this `EventTag`."""
  imageByImage: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `upsertGroup` mutation."""
input UpsertGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  data: GroupDatumInput!
  groupId: UUID
  translations: [GroupTrDatumInput]!
}

"""The output of our `upsertGroup` mutation."""
type UpsertGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  group: Group

  """Reads a single `Image` that is related to this `Group`."""
  imageByImage: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `upsertInfoPage` mutation."""
input UpsertInfoPageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  data: InfoPageDatumInput!
  infoPageId: UUID
  translations: [InfoPageTrDatumInput]!
}

"""The output of our `upsertInfoPage` mutation."""
type UpsertInfoPagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  infoPage: InfoPage

  """Reads a single `Page` that is related to this `InfoPage`."""
  pageById: Page

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
