input AuthenticateInput {
  password: String!
  username: String!
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """Equal to the specified value."""
  equalTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean
}

"""All input for the create `EventViaEventTag` mutation."""
input CreateEventViaEventTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventViaEventTag` to be created by this mutation."""
  eventViaEventTag: EventViaEventTagInput!
}

"""The output of our create `EventViaEventTag` mutation."""
type CreateEventViaEventTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventViaEventTag`."""
  event: Event

  """The `EventViaEventTag` that was created by this mutation."""
  eventViaEventTag: EventViaEventTag

  """An edge for our `EventViaEventTag`. May be used by Relay 1."""
  eventViaEventTagEdge(
    """The method to use when ordering `EventViaEventTag`."""
    orderBy: [EventViaEventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaEventTagsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EventTag` that is related to this `EventViaEventTag`."""
  tag: EventTag
}

"""All input for the create `EventViaGroup` mutation."""
input CreateEventViaGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventViaGroup` to be created by this mutation."""
  eventViaGroup: EventViaGroupInput!
}

"""The output of our create `EventViaGroup` mutation."""
type CreateEventViaGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventViaGroup`."""
  event: Event

  """The `EventViaGroup` that was created by this mutation."""
  eventViaGroup: EventViaGroup

  """An edge for our `EventViaGroup`. May be used by Relay 1."""
  eventViaGroupEdge(
    """The method to use when ordering `EventViaGroup`."""
    orderBy: [EventViaGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaGroupsEdge

  """Reads a single `Group` that is related to this `EventViaGroup`."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Image` mutation."""
input CreateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Image` to be created by this mutation."""
  image: ImageInput!
}

"""The output of our create `Image` mutation."""
type CreateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was created by this mutation."""
  image: Image

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Member` mutation."""
input CreateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Member` to be created by this mutation."""
  member: MemberInput!
}

"""The output of our create `Member` mutation."""
type CreateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was created by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `News` mutation."""
input CreateNewsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `News` to be created by this mutation."""
  news: NewsInput!
}

"""The output of our create `News` mutation."""
type CreateNewsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `News` that was created by this mutation."""
  news: News

  """An edge for our `News`. May be used by Relay 1."""
  newsEdge(
    """The method to use when ordering `News`."""
    orderBy: [NewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `NewsTr` mutation."""
input CreateNewsTrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NewsTr` to be created by this mutation."""
  newsTr: NewsTrInput!
}

"""The output of our create `NewsTr` mutation."""
type CreateNewsTrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `News` that is related to this `NewsTr`."""
  news: News

  """The `NewsTr` that was created by this mutation."""
  newsTr: NewsTr

  """An edge for our `NewsTr`. May be used by Relay 1."""
  newsTrEdge(
    """The method to use when ordering `NewsTr`."""
    orderBy: [NewsTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsTrsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Page` mutation."""
input CreatePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Page` to be created by this mutation."""
  page: PageInput!
}

"""The output of our create `Page` mutation."""
type CreatePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Page` that was created by this mutation."""
  page: Page

  """An edge for our `Page`. May be used by Relay 1."""
  pageEdge(
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PageTr` mutation."""
input CreatePageTrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PageTr` to be created by this mutation."""
  pageTr: PageTrInput!
}

"""The output of our create `PageTr` mutation."""
type CreatePageTrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Page` that is related to this `PageTr`."""
  pageByPageName: Page

  """The `PageTr` that was created by this mutation."""
  pageTr: PageTr

  """An edge for our `PageTr`. May be used by Relay 1."""
  pageTrEdge(
    """The method to use when ordering `PageTr`."""
    orderBy: [PageTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageTrsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Picture` mutation."""
input CreatePictureInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Picture` to be created by this mutation."""
  picture: PictureInput!
}

"""The output of our create `Picture` mutation."""
type CreatePicturePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Image` that is related to this `Picture`."""
  imageByImage: Image

  """The `Picture` that was created by this mutation."""
  picture: Picture

  """An edge for our `Picture`. May be used by Relay 1."""
  pictureEdge(
    """The method to use when ordering `Picture`."""
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PicturesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createUploadUrl` mutation."""
input CreateUploadUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  You must provide the content type (or MIME type) of the content you intend
  to upload. For further information about content types, see
  https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
  """
  contentType: String!
}

"""The output of our `createUploadUrl` mutation."""
type CreateUploadUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formData: String!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Upload content to this signed URL."""
  uploadUrl: String!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime
}

"""All input for the `deleteEventViaEventTag` mutation."""
input DeleteEventViaEventTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: BigInt!
  tagId: BigInt!
}

"""The output of our delete `EventViaEventTag` mutation."""
type DeleteEventViaEventTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventViaEventTagNodeId: ID

  """Reads a single `Event` that is related to this `EventViaEventTag`."""
  event: Event

  """The `EventViaEventTag` that was deleted by this mutation."""
  eventViaEventTag: EventViaEventTag

  """An edge for our `EventViaEventTag`. May be used by Relay 1."""
  eventViaEventTagEdge(
    """The method to use when ordering `EventViaEventTag`."""
    orderBy: [EventViaEventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaEventTagsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EventTag` that is related to this `EventViaEventTag`."""
  tag: EventTag
}

"""All input for the `deleteEventViaGroup` mutation."""
input DeleteEventViaGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: BigInt!
  groupId: BigInt!
}

"""The output of our delete `EventViaGroup` mutation."""
type DeleteEventViaGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventViaGroupNodeId: ID

  """Reads a single `Event` that is related to this `EventViaGroup`."""
  event: Event

  """The `EventViaGroup` that was deleted by this mutation."""
  eventViaGroup: EventViaGroup

  """An edge for our `EventViaGroup`. May be used by Relay 1."""
  eventViaGroupEdge(
    """The method to use when ordering `EventViaGroup`."""
    orderBy: [EventViaGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaGroupsEdge

  """Reads a single `Group` that is related to this `EventViaGroup`."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteImage` mutation."""
input DeleteImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Image` mutation."""
type DeleteImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedImageNodeId: ID

  """The `Image` that was deleted by this mutation."""
  image: Image

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMemberByUsername` mutation."""
input DeleteMemberByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteMember` mutation."""
input DeleteMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Member` mutation."""
type DeleteMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMemberNodeId: ID

  """The `Member` that was deleted by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNews` mutation."""
input DeleteNewsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `News` mutation."""
type DeleteNewsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNewsNodeId: ID

  """The `News` that was deleted by this mutation."""
  news: News

  """An edge for our `News`. May be used by Relay 1."""
  newsEdge(
    """The method to use when ordering `News`."""
    orderBy: [NewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNewsTr` mutation."""
input DeleteNewsTrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  languageCode: TrLanguage!
  newsId: BigInt!
}

"""The output of our delete `NewsTr` mutation."""
type DeleteNewsTrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNewsTrNodeId: ID

  """Reads a single `News` that is related to this `NewsTr`."""
  news: News

  """The `NewsTr` that was deleted by this mutation."""
  newsTr: NewsTr

  """An edge for our `NewsTr`. May be used by Relay 1."""
  newsTrEdge(
    """The method to use when ordering `NewsTr`."""
    orderBy: [NewsTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsTrsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePage` mutation."""
input DeletePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `Page` mutation."""
type DeletePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPageNodeId: ID

  """The `Page` that was deleted by this mutation."""
  page: Page

  """An edge for our `Page`. May be used by Relay 1."""
  pageEdge(
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePageTr` mutation."""
input DeletePageTrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  languageCode: TrLanguage!
  pageName: String!
}

"""The output of our delete `PageTr` mutation."""
type DeletePageTrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPageTrNodeId: ID

  """Reads a single `Page` that is related to this `PageTr`."""
  pageByPageName: Page

  """The `PageTr` that was deleted by this mutation."""
  pageTr: PageTr

  """An edge for our `PageTr`. May be used by Relay 1."""
  pageTrEdge(
    """The method to use when ordering `PageTr`."""
    orderBy: [PageTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageTrsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePicture` mutation."""
input DeletePictureInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Picture` mutation."""
type DeletePicturePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPictureNodeId: ID

  """Reads a single `Image` that is related to this `Picture`."""
  imageByImage: Image

  """The `Picture` that was deleted by this mutation."""
  picture: Picture

  """An edge for our `Picture`. May be used by Relay 1."""
  pictureEdge(
    """The method to use when ordering `Picture`."""
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PicturesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Event {
  endsAt: Datetime!

  """Reads and enables pagination through a set of `EventViaGroup`."""
  groups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventViaGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventViaGroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventViaGroup`."""
    orderBy: [EventViaGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaGroupsConnection!
  id: BigInt!

  """Reads a single `Image` that is related to this `Event`."""
  imageByOverrideImage: Image
  img: ResponsiveImage
  overrideImage: BigInt
  special: Boolean!
  startsAt: Datetime!

  """Reads and enables pagination through a set of `EventViaEventTag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventViaEventTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventViaEventTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventViaEventTag`."""
    orderBy: [EventViaEventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaEventTagsConnection!
  templateName: String

  """Reads and enables pagination through a set of `EventTr`."""
  translations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventTr`."""
    orderBy: [EventTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTrsConnection!
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `endsAt` field."""
  endsAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `overrideImage` field."""
  overrideImage: BigInt

  """Checks for equality with the object’s `special` field."""
  special: Boolean

  """Checks for equality with the object’s `startsAt` field."""
  startsAt: Datetime

  """Checks for equality with the object’s `templateName` field."""
  templateName: String
}

"""An input for mutations affecting `EventDatum`"""
input EventDatumInput {
  endsAt: Datetime!
  groupIds: [BigInt]
  overrideImage: BigInt
  special: Boolean!
  startsAt: Datetime!
  tagIds: [BigInt]
  templateName: String
}

"""
A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’
"""
input EventFilter {
  """Filter by the object’s `endsAt` field."""
  endsAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `overrideImage` field."""
  overrideImage: BigIntFilter

  """Filter by the object’s `special` field."""
  special: BooleanFilter

  """Filter by the object’s `startsAt` field."""
  startsAt: DatetimeFilter

  """Filter by the object’s `templateName` field."""
  templateName: StringFilter
}

type EventTag {
  """Reads and enables pagination through a set of `EventViaEventTag`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventViaEventTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventViaEventTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventViaEventTag`."""
    orderBy: [EventViaEventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaEventTagsConnection!
  id: BigInt!
  image: BigInt

  """Reads a single `Image` that is related to this `EventTag`."""
  imageByImage: Image
  img: ResponsiveImage!

  """Reads and enables pagination through a set of `EventTagTr`."""
  translations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventTagTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventTagTr`."""
    orderBy: [EventTagTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTagTrsConnection!
}

"""
A condition to be used against `EventTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EventTagCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `image` field."""
  image: BigInt
}

"""
A filter to be used against `EventTag` object types. All fields are combined with a logical ‘and.’
"""
input EventTagFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `image` field."""
  image: BigIntFilter
}

type EventTagTr {
  languageCode: TrLanguage!

  """Reads a single `EventTag` that is related to this `EventTagTr`."""
  tag: EventTag
  tagId: BigInt!
  title: String!
}

"""
A condition to be used against `EventTagTr` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EventTagTrCondition {
  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `tagId` field."""
  tagId: BigInt

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""
A filter to be used against `EventTagTr` object types. All fields are combined with a logical ‘and.’
"""
input EventTagTrFilter {
  """Filter by the object’s `languageCode` field."""
  languageCode: TrLanguageFilter

  """Filter by the object’s `tagId` field."""
  tagId: BigIntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter
}

"""A connection to a list of `EventTagTr` values."""
type EventTagTrsConnection {
  """
  A list of edges which contains the `EventTagTr` and cursor to aid in pagination.
  """
  edges: [EventTagTrsEdge!]!

  """A list of `EventTagTr` objects."""
  nodes: [EventTagTr!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventTagTr` you could get from the connection."""
  totalCount: Int!
}

"""A `EventTagTr` edge in the connection."""
type EventTagTrsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventTagTr` at the end of the edge."""
  node: EventTagTr!
}

"""Methods to use when ordering `EventTagTr`."""
enum EventTagTrsOrderBy {
  LANGUAGE_CODE_ASC
  LANGUAGE_CODE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  TITLE_ASC
  TITLE_DESC
}

"""A connection to a list of `EventTag` values."""
type EventTagsConnection {
  """
  A list of edges which contains the `EventTag` and cursor to aid in pagination.
  """
  edges: [EventTagsEdge!]!

  """A list of `EventTag` objects."""
  nodes: [EventTag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventTag` you could get from the connection."""
  totalCount: Int!
}

"""A `EventTag` edge in the connection."""
type EventTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventTag` at the end of the edge."""
  node: EventTag!
}

"""Methods to use when ordering `EventTag`."""
enum EventTagsOrderBy {
  ID_ASC
  ID_DESC
  IMAGE_ASC
  IMAGE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EventTr {
  description: String!

  """Reads a single `Event` that is related to this `EventTr`."""
  event: Event
  eventId: BigInt!
  languageCode: TrLanguage!
  slug: String!
  title: String!
}

"""
A condition to be used against `EventTr` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventTrCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""An input for mutations affecting `EventTrDatum`"""
input EventTrDatumInput {
  description: String!
  languageCode: String!
  title: String!
}

"""
A filter to be used against `EventTr` object types. All fields are combined with a logical ‘and.’
"""
input EventTrFilter {
  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `eventId` field."""
  eventId: BigIntFilter

  """Filter by the object’s `languageCode` field."""
  languageCode: TrLanguageFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter
}

"""A connection to a list of `EventTr` values."""
type EventTrsConnection {
  """
  A list of edges which contains the `EventTr` and cursor to aid in pagination.
  """
  edges: [EventTrsEdge!]!

  """A list of `EventTr` objects."""
  nodes: [EventTr!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventTr` you could get from the connection."""
  totalCount: Int!
}

"""A `EventTr` edge in the connection."""
type EventTrsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventTr` at the end of the edge."""
  node: EventTr!
}

"""Methods to use when ordering `EventTr`."""
enum EventTrsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  LANGUAGE_CODE_ASC
  LANGUAGE_CODE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  TITLE_ASC
  TITLE_DESC
}

type EventViaEventTag {
  """Reads a single `Event` that is related to this `EventViaEventTag`."""
  event: Event
  eventId: BigInt!

  """Reads a single `EventTag` that is related to this `EventViaEventTag`."""
  tag: EventTag
  tagId: BigInt!
}

"""
A condition to be used against `EventViaEventTag` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventViaEventTagCondition {
  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `tagId` field."""
  tagId: BigInt
}

"""
A filter to be used against `EventViaEventTag` object types. All fields are combined with a logical ‘and.’
"""
input EventViaEventTagFilter {
  """Filter by the object’s `eventId` field."""
  eventId: BigIntFilter

  """Filter by the object’s `tagId` field."""
  tagId: BigIntFilter
}

"""An input for mutations affecting `EventViaEventTag`"""
input EventViaEventTagInput {
  eventId: BigInt!
  tagId: BigInt!
}

"""
Represents an update to a `EventViaEventTag`. Fields that are set will be updated.
"""
input EventViaEventTagPatch {
  eventId: BigInt
  tagId: BigInt
}

"""A connection to a list of `EventViaEventTag` values."""
type EventViaEventTagsConnection {
  """
  A list of edges which contains the `EventViaEventTag` and cursor to aid in pagination.
  """
  edges: [EventViaEventTagsEdge!]!

  """A list of `EventViaEventTag` objects."""
  nodes: [EventViaEventTag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EventViaEventTag` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EventViaEventTag` edge in the connection."""
type EventViaEventTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventViaEventTag` at the end of the edge."""
  node: EventViaEventTag!
}

"""Methods to use when ordering `EventViaEventTag`."""
enum EventViaEventTagsOrderBy {
  EVENT_ID_ASC
  EVENT_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAG_ID_ASC
  TAG_ID_DESC
}

type EventViaGroup {
  """Reads a single `Event` that is related to this `EventViaGroup`."""
  event: Event
  eventId: BigInt!

  """Reads a single `Group` that is related to this `EventViaGroup`."""
  group: Group
  groupId: BigInt!
}

"""
A condition to be used against `EventViaGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventViaGroupCondition {
  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `groupId` field."""
  groupId: BigInt
}

"""
A filter to be used against `EventViaGroup` object types. All fields are combined with a logical ‘and.’
"""
input EventViaGroupFilter {
  """Filter by the object’s `eventId` field."""
  eventId: BigIntFilter

  """Filter by the object’s `groupId` field."""
  groupId: BigIntFilter
}

"""An input for mutations affecting `EventViaGroup`"""
input EventViaGroupInput {
  eventId: BigInt!
  groupId: BigInt!
}

"""
Represents an update to a `EventViaGroup`. Fields that are set will be updated.
"""
input EventViaGroupPatch {
  eventId: BigInt
  groupId: BigInt
}

"""A connection to a list of `EventViaGroup` values."""
type EventViaGroupsConnection {
  """
  A list of edges which contains the `EventViaGroup` and cursor to aid in pagination.
  """
  edges: [EventViaGroupsEdge!]!

  """A list of `EventViaGroup` objects."""
  nodes: [EventViaGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventViaGroup` you could get from the connection."""
  totalCount: Int!
}

"""A `EventViaGroup` edge in the connection."""
type EventViaGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventViaGroup` at the end of the edge."""
  node: EventViaGroup!
}

"""Methods to use when ordering `EventViaGroup`."""
enum EventViaGroupsOrderBy {
  EVENT_ID_ASC
  EVENT_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """A list of `Event` objects."""
  nodes: [Event!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int!
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Event` at the end of the edge."""
  node: Event!
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  ENDS_AT_ASC
  ENDS_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OVERRIDE_IMAGE_ASC
  OVERRIDE_IMAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SPECIAL_ASC
  SPECIAL_DESC
  STARTS_AT_ASC
  STARTS_AT_DESC
  TEMPLATE_NAME_ASC
  TEMPLATE_NAME_DESC
}

type Group {
  """Reads and enables pagination through a set of `EventViaGroup`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventViaGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventViaGroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventViaGroup`."""
    orderBy: [EventViaGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaGroupsConnection!
  id: BigInt!
  image: BigInt

  """Reads a single `Image` that is related to this `Group`."""
  imageByImage: Image
  img: ResponsiveImage!
  isOpen: Boolean!

  """Reads and enables pagination through a set of `GroupTr`."""
  translations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupTr`."""
    orderBy: [GroupTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupTrsConnection!
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `image` field."""
  image: BigInt

  """Checks for equality with the object’s `isOpen` field."""
  isOpen: Boolean
}

"""An input for mutations affecting `GroupDatum`"""
input GroupDatumInput {
  image: BigInt!
  isOpen: Boolean!
}

"""
A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’
"""
input GroupFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `image` field."""
  image: BigIntFilter

  """Filter by the object’s `isOpen` field."""
  isOpen: BooleanFilter
}

type GroupTr {
  activity: String!
  description: String!

  """Reads a single `Group` that is related to this `GroupTr`."""
  group: Group
  groupId: BigInt!
  languageCode: TrLanguage!
  shortDescription: String!
  slug: String!
  title: String!
}

"""
A condition to be used against `GroupTr` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupTrCondition {
  """Checks for equality with the object’s `activity` field."""
  activity: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `groupId` field."""
  groupId: BigInt

  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `shortDescription` field."""
  shortDescription: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""An input for mutations affecting `GroupTrDatum`"""
input GroupTrDatumInput {
  activity: String!
  description: String!
  languageCode: String!
  shortDescription: String!
  title: String!
}

"""
A filter to be used against `GroupTr` object types. All fields are combined with a logical ‘and.’
"""
input GroupTrFilter {
  """Filter by the object’s `activity` field."""
  activity: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `groupId` field."""
  groupId: BigIntFilter

  """Filter by the object’s `languageCode` field."""
  languageCode: TrLanguageFilter

  """Filter by the object’s `shortDescription` field."""
  shortDescription: StringFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter
}

"""A connection to a list of `GroupTr` values."""
type GroupTrsConnection {
  """
  A list of edges which contains the `GroupTr` and cursor to aid in pagination.
  """
  edges: [GroupTrsEdge!]!

  """A list of `GroupTr` objects."""
  nodes: [GroupTr!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupTr` you could get from the connection."""
  totalCount: Int!
}

"""A `GroupTr` edge in the connection."""
type GroupTrsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupTr` at the end of the edge."""
  node: GroupTr!
}

"""Methods to use when ordering `GroupTr`."""
enum GroupTrsOrderBy {
  ACTIVITY_ASC
  ACTIVITY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  LANGUAGE_CODE_ASC
  LANGUAGE_CODE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SHORT_DESCRIPTION_ASC
  SHORT_DESCRIPTION_DESC
  SLUG_ASC
  SLUG_DESC
  TITLE_ASC
  TITLE_DESC
}

"""A connection to a list of `Group` values."""
type GroupsConnection {
  """
  A list of edges which contains the `Group` and cursor to aid in pagination.
  """
  edges: [GroupsEdge!]!

  """A list of `Group` objects."""
  nodes: [Group!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection."""
type GroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group!
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  ID_ASC
  ID_DESC
  IMAGE_ASC
  IMAGE_DESC
  IS_OPEN_ASC
  IS_OPEN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Image {
  """Reads and enables pagination through a set of `EventTag`."""
  eventTagsByImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTagsConnection!

  """Reads and enables pagination through a set of `Event`."""
  eventsByOverrideImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection!
  height: Int!
  id: BigInt!
  img: ResponsiveImage!
  path: String!

  """Reads and enables pagination through a set of `Picture`."""
  picturesByImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PictureCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PictureFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Picture`."""
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PicturesConnection!
  width: Int!
}

"""
A condition to be used against `Image` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ImageCondition {
  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `width` field."""
  width: Int
}

"""
A filter to be used against `Image` object types. All fields are combined with a logical ‘and.’
"""
input ImageFilter {
  """Filter by the object’s `height` field."""
  height: IntFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `path` field."""
  path: StringFilter

  """Filter by the object’s `width` field."""
  width: IntFilter
}

"""An input for mutations affecting `Image`"""
input ImageInput {
  height: Int!
  id: BigInt
  path: String!
  width: Int!
}

"""
Represents an update to a `Image`. Fields that are set will be updated.
"""
input ImagePatch {
  height: Int
  id: BigInt
  path: String
  width: Int
}

"""A connection to a list of `Image` values."""
type ImagesConnection {
  """
  A list of edges which contains the `Image` and cursor to aid in pagination.
  """
  edges: [ImagesEdge!]!

  """A list of `Image` objects."""
  nodes: [Image!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Image` you could get from the connection."""
  totalCount: Int!
}

"""A `Image` edge in the connection."""
type ImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Image` at the end of the edge."""
  node: Image!
}

"""Methods to use when ordering `Image`."""
enum ImagesOrderBy {
  HEIGHT_ASC
  HEIGHT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PATH_ASC
  PATH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  WIDTH_ASC
  WIDTH_DESC
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int
}

type Member {
  id: UUID!
  isActive: Boolean!
  name: String!
  userRole: String!
  username: String!
}

"""
A condition to be used against `Member` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MemberCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isActive` field."""
  isActive: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `userRole` field."""
  userRole: String

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""
A filter to be used against `Member` object types. All fields are combined with a logical ‘and.’
"""
input MemberFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isActive` field."""
  isActive: BooleanFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `userRole` field."""
  userRole: StringFilter

  """Filter by the object’s `username` field."""
  username: StringFilter
}

"""An input for mutations affecting `Member`"""
input MemberInput {
  id: UUID
  isActive: Boolean!
  name: String!
  userRole: String!
  username: String!
}

"""
Represents an update to a `Member`. Fields that are set will be updated.
"""
input MemberPatch {
  id: UUID
  isActive: Boolean
  name: String
  userRole: String
  username: String
}

"""A connection to a list of `Member` values."""
type MembersConnection {
  """
  A list of edges which contains the `Member` and cursor to aid in pagination.
  """
  edges: [MembersEdge!]!

  """A list of `Member` objects."""
  nodes: [Member!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Member` you could get from the connection."""
  totalCount: Int!
}

"""A `Member` edge in the connection."""
type MembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Member` at the end of the edge."""
  node: Member!
}

"""Methods to use when ordering `Member`."""
enum MembersOrderBy {
  ID_ASC
  ID_DESC
  IS_ACTIVE_ASC
  IS_ACTIVE_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
  USER_ROLE_ASC
  USER_ROLE_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): String!

  """Creates a single `EventViaEventTag`."""
  createEventViaEventTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventViaEventTagInput!
  ): CreateEventViaEventTagPayload

  """Creates a single `EventViaGroup`."""
  createEventViaGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventViaGroupInput!
  ): CreateEventViaGroupPayload

  """Creates a single `Image`."""
  createImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImageInput!
  ): CreateImagePayload

  """Creates a single `Member`."""
  createMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMemberInput!
  ): CreateMemberPayload

  """Creates a single `News`."""
  createNews(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNewsInput!
  ): CreateNewsPayload

  """Creates a single `NewsTr`."""
  createNewsTr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNewsTrInput!
  ): CreateNewsTrPayload

  """Creates a single `Page`."""
  createPage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePageInput!
  ): CreatePagePayload

  """Creates a single `PageTr`."""
  createPageTr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePageTrInput!
  ): CreatePageTrPayload

  """Creates a single `Picture`."""
  createPicture(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePictureInput!
  ): CreatePicturePayload

  """Get a signed URL for uploading files. It will expire in 5 minutes."""
  createUploadUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUploadUrlInput!
  ): CreateUploadUrlPayload

  """Deletes a single `EventViaEventTag` using a unique key."""
  deleteEventViaEventTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventViaEventTagInput!
  ): DeleteEventViaEventTagPayload

  """Deletes a single `EventViaGroup` using a unique key."""
  deleteEventViaGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventViaGroupInput!
  ): DeleteEventViaGroupPayload

  """Deletes a single `Image` using a unique key."""
  deleteImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageInput!
  ): DeleteImagePayload

  """Deletes a single `Member` using a unique key."""
  deleteMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberInput!
  ): DeleteMemberPayload

  """Deletes a single `Member` using a unique key."""
  deleteMemberByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberByUsernameInput!
  ): DeleteMemberPayload

  """Deletes a single `News` using a unique key."""
  deleteNews(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNewsInput!
  ): DeleteNewsPayload

  """Deletes a single `NewsTr` using a unique key."""
  deleteNewsTr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNewsTrInput!
  ): DeleteNewsTrPayload

  """Deletes a single `Page` using a unique key."""
  deletePage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageInput!
  ): DeletePagePayload

  """Deletes a single `PageTr` using a unique key."""
  deletePageTr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageTrInput!
  ): DeletePageTrPayload

  """Deletes a single `Picture` using a unique key."""
  deletePicture(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePictureInput!
  ): DeletePicturePayload
  logout: Boolean
  reorderPictures(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ReorderPicturesInput!
  ): ReorderPicturesPayload

  """Updates a single `EventViaEventTag` using a unique key and a patch."""
  updateEventViaEventTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventViaEventTagInput!
  ): UpdateEventViaEventTagPayload

  """Updates a single `EventViaGroup` using a unique key and a patch."""
  updateEventViaGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventViaGroupInput!
  ): UpdateEventViaGroupPayload

  """Updates a single `Image` using a unique key and a patch."""
  updateImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageInput!
  ): UpdateImagePayload

  """Updates a single `Member` using a unique key and a patch."""
  updateMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberInput!
  ): UpdateMemberPayload

  """Updates a single `Member` using a unique key and a patch."""
  updateMemberByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberByUsernameInput!
  ): UpdateMemberPayload

  """Updates a single `News` using a unique key and a patch."""
  updateNews(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNewsInput!
  ): UpdateNewsPayload

  """Updates a single `NewsTr` using a unique key and a patch."""
  updateNewsTr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNewsTrInput!
  ): UpdateNewsTrPayload

  """Updates a single `Page` using a unique key and a patch."""
  updatePage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageInput!
  ): UpdatePagePayload

  """Updates a single `PageTr` using a unique key and a patch."""
  updatePageTr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageTrInput!
  ): UpdatePageTrPayload

  """Updates a single `Picture` using a unique key and a patch."""
  updatePicture(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePictureInput!
  ): UpdatePicturePayload
  upsertEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertEventInput!
  ): UpsertEventPayload
  upsertGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertGroupInput!
  ): UpsertGroupPayload
}

type News {
  id: BigInt!
  publishedAt: Datetime!

  """Reads and enables pagination through a set of `NewsTr`."""
  translations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NewsTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NewsTr`."""
    orderBy: [NewsTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsTrsConnection!
  updatedAt: Datetime!
}

"""
A condition to be used against `News` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NewsCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `publishedAt` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `News` values."""
type NewsConnection {
  """
  A list of edges which contains the `News` and cursor to aid in pagination.
  """
  edges: [NewsEdge!]!

  """A list of `News` objects."""
  nodes: [News!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `News` you could get from the connection."""
  totalCount: Int!
}

"""A `News` edge in the connection."""
type NewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `News` at the end of the edge."""
  node: News!
}

"""
A filter to be used against `News` object types. All fields are combined with a logical ‘and.’
"""
input NewsFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `publishedAt` field."""
  publishedAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `News`"""
input NewsInput {
  id: BigInt
  publishedAt: Datetime!
  updatedAt: Datetime!
}

"""Methods to use when ordering `News`."""
enum NewsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Represents an update to a `News`. Fields that are set will be updated."""
input NewsPatch {
  id: BigInt
  publishedAt: Datetime
  updatedAt: Datetime
}

type NewsTr {
  content: String!
  languageCode: TrLanguage!

  """Reads a single `News` that is related to this `NewsTr`."""
  news: News
  newsId: BigInt!
  title: String!
}

"""
A condition to be used against `NewsTr` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NewsTrCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `newsId` field."""
  newsId: BigInt

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""
A filter to be used against `NewsTr` object types. All fields are combined with a logical ‘and.’
"""
input NewsTrFilter {
  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `languageCode` field."""
  languageCode: TrLanguageFilter

  """Filter by the object’s `newsId` field."""
  newsId: BigIntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter
}

"""An input for mutations affecting `NewsTr`"""
input NewsTrInput {
  content: String!
  languageCode: TrLanguage!
  newsId: BigInt!
  title: String!
}

"""
Represents an update to a `NewsTr`. Fields that are set will be updated.
"""
input NewsTrPatch {
  content: String
  languageCode: TrLanguage
  newsId: BigInt
  title: String
}

"""A connection to a list of `NewsTr` values."""
type NewsTrsConnection {
  """
  A list of edges which contains the `NewsTr` and cursor to aid in pagination.
  """
  edges: [NewsTrsEdge!]!

  """A list of `NewsTr` objects."""
  nodes: [NewsTr!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NewsTr` you could get from the connection."""
  totalCount: Int!
}

"""A `NewsTr` edge in the connection."""
type NewsTrsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NewsTr` at the end of the edge."""
  node: NewsTr!
}

"""Methods to use when ordering `NewsTr`."""
enum NewsTrsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  LANGUAGE_CODE_ASC
  LANGUAGE_CODE_DESC
  NATURAL
  NEWS_ID_ASC
  NEWS_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

type Page {
  name: String!

  """Reads and enables pagination through a set of `PageTr`."""
  translations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PageTr`."""
    orderBy: [PageTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageTrsConnection!
}

"""
A condition to be used against `Page` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PageCondition {
  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `Page` object types. All fields are combined with a logical ‘and.’
"""
input PageFilter {
  """Filter by the object’s `name` field."""
  name: StringFilter
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""An input for mutations affecting `Page`"""
input PageInput {
  name: String!
}

"""Represents an update to a `Page`. Fields that are set will be updated."""
input PagePatch {
  name: String
}

type PageTr {
  content: String!
  languageCode: TrLanguage!

  """Reads a single `Page` that is related to this `PageTr`."""
  pageByPageName: Page
  pageName: String!
}

"""
A condition to be used against `PageTr` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PageTrCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `languageCode` field."""
  languageCode: TrLanguage

  """Checks for equality with the object’s `pageName` field."""
  pageName: String
}

"""
A filter to be used against `PageTr` object types. All fields are combined with a logical ‘and.’
"""
input PageTrFilter {
  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `languageCode` field."""
  languageCode: TrLanguageFilter

  """Filter by the object’s `pageName` field."""
  pageName: StringFilter
}

"""An input for mutations affecting `PageTr`"""
input PageTrInput {
  content: String!
  languageCode: TrLanguage!
  pageName: String!
}

"""
Represents an update to a `PageTr`. Fields that are set will be updated.
"""
input PageTrPatch {
  content: String
  languageCode: TrLanguage
  pageName: String
}

"""A connection to a list of `PageTr` values."""
type PageTrsConnection {
  """
  A list of edges which contains the `PageTr` and cursor to aid in pagination.
  """
  edges: [PageTrsEdge!]!

  """A list of `PageTr` objects."""
  nodes: [PageTr!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PageTr` you could get from the connection."""
  totalCount: Int!
}

"""A `PageTr` edge in the connection."""
type PageTrsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PageTr` at the end of the edge."""
  node: PageTr!
}

"""Methods to use when ordering `PageTr`."""
enum PageTrsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  LANGUAGE_CODE_ASC
  LANGUAGE_CODE_DESC
  NATURAL
  PAGE_NAME_ASC
  PAGE_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Page` values."""
type PagesConnection {
  """
  A list of edges which contains the `Page` and cursor to aid in pagination.
  """
  edges: [PagesEdge!]!

  """A list of `Page` objects."""
  nodes: [Page!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Page` you could get from the connection."""
  totalCount: Int!
}

"""A `Page` edge in the connection."""
type PagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Page` at the end of the edge."""
  node: Page!
}

"""Methods to use when ordering `Page`."""
enum PagesOrderBy {
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Picture {
  allowOnHome: Boolean!
  id: BigInt!
  image: BigInt!

  """Reads a single `Image` that is related to this `Picture`."""
  imageByImage: Image
  img: ResponsiveImage!
  rank: Int!
}

"""
A condition to be used against `Picture` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PictureCondition {
  """Checks for equality with the object’s `allowOnHome` field."""
  allowOnHome: Boolean

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `image` field."""
  image: BigInt

  """Checks for equality with the object’s `rank` field."""
  rank: Int
}

"""
A filter to be used against `Picture` object types. All fields are combined with a logical ‘and.’
"""
input PictureFilter {
  """Filter by the object’s `allowOnHome` field."""
  allowOnHome: BooleanFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `image` field."""
  image: BigIntFilter

  """Filter by the object’s `rank` field."""
  rank: IntFilter
}

"""An input for mutations affecting `Picture`"""
input PictureInput {
  allowOnHome: Boolean
  id: BigInt
  image: BigInt!
  rank: Int
}

"""
Represents an update to a `Picture`. Fields that are set will be updated.
"""
input PicturePatch {
  allowOnHome: Boolean
  id: BigInt
  image: BigInt
  rank: Int
}

"""A connection to a list of `Picture` values."""
type PicturesConnection {
  """
  A list of edges which contains the `Picture` and cursor to aid in pagination.
  """
  edges: [PicturesEdge!]!

  """A list of `Picture` objects."""
  nodes: [Picture!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Picture` you could get from the connection."""
  totalCount: Int!
}

"""A `Picture` edge in the connection."""
type PicturesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Picture` at the end of the edge."""
  node: Picture!
}

"""Methods to use when ordering `Picture`."""
enum PicturesOrderBy {
  ALLOW_ON_HOME_ASC
  ALLOW_ON_HOME_DESC
  ID_ASC
  ID_DESC
  IMAGE_ASC
  IMAGE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RANK_ASC
  RANK_DESC
}

"""The root query type which gives access points into the data universe."""
type Query {
  currentMember: Member
  event(id: BigInt!): Event
  eventBySlug(preferredLanguageCode: String!, slug: String!): Event
  eventImage(eid: Int!, overrideImage: Int!): Int
  eventTag(id: BigInt!): EventTag
  eventTagTr(languageCode: TrLanguage!, tagId: BigInt!): EventTagTr

  """Reads and enables pagination through a set of `EventTagTr`."""
  eventTagTrs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventTagTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventTagTr`."""
    orderBy: [EventTagTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTagTrsConnection

  """Reads and enables pagination through a set of `EventTag`."""
  eventTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTagsConnection
  eventTr(eventId: BigInt!, languageCode: TrLanguage!): EventTr
  eventTrBySlugAndLanguageCode(languageCode: TrLanguage!, slug: String!): EventTr

  """Reads and enables pagination through a set of `EventTr`."""
  eventTrs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventTr`."""
    orderBy: [EventTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTrsConnection
  eventViaEventTag(eventId: BigInt!, tagId: BigInt!): EventViaEventTag
  eventViaGroup(eventId: BigInt!, groupId: BigInt!): EventViaGroup

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection
  group(id: BigInt!): Group
  groupBySlug(preferredLanguageCode: String!, slug: String!): Group
  groupTr(groupId: BigInt!, languageCode: TrLanguage!): GroupTr
  groupTrBySlugAndLanguageCode(languageCode: TrLanguage!, slug: String!): GroupTr

  """Reads and enables pagination through a set of `GroupTr`."""
  groupTrs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupTr`."""
    orderBy: [GroupTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupTrsConnection

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection
  image(id: BigInt!): Image

  """Reads and enables pagination through a set of `Image`."""
  images(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesConnection
  member(id: UUID!): Member
  memberByUsername(username: String!): Member

  """Reads and enables pagination through a set of `Member`."""
  members(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MemberFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersConnection
  news(id: BigInt!): News
  newsTr(languageCode: TrLanguage!, newsId: BigInt!): NewsTr

  """Reads and enables pagination through a set of `NewsTr`."""
  newsTrs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NewsTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NewsTr`."""
    orderBy: [NewsTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsTrsConnection

  """Reads and enables pagination through a set of `News`."""
  newses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NewsFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `News`."""
    orderBy: [NewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsConnection
  page(name: String!): Page
  pageTr(languageCode: TrLanguage!, pageName: String!): PageTr

  """Reads and enables pagination through a set of `PageTr`."""
  pageTrs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageTrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageTrFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PageTr`."""
    orderBy: [PageTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageTrsConnection

  """Reads and enables pagination through a set of `Page`."""
  pages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesConnection
  picture(id: BigInt!): Picture

  """Reads and enables pagination through a set of `Picture`."""
  pictures(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PictureCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PictureFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Picture`."""
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PicturesConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `Picture`."""
  randomPictures(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): PicturesConnection

  """Reads and enables pagination through a set of `EventTag`."""
  searchEventTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    query: String!
  ): EventTagsConnection

  """Reads and enables pagination through a set of `Event`."""
  searchEventTemplates(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    query: String!
  ): EventsConnection

  """Reads and enables pagination through a set of `Group`."""
  searchGroups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    query: String!
  ): GroupsConnection
}

"""All input for the `reorderPictures` mutation."""
input ReorderPicturesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  reorders: [ReorderPicturesReorderInput]!
}

"""The output of our `reorderPictures` mutation."""
type ReorderPicturesPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""An input for mutations affecting `ReorderPicturesReorder`"""
input ReorderPicturesReorderInput {
  fromRank: Int
  toRank: Int
}

type ResponsiveImage {
  height: Int!
  src: String!
  srcSetJpeg: String!
  srcSetWebp: String!
  width: Int!
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """Equal to the specified value."""
  equalTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Not equal to the specified value."""
  notEqualTo: String
}

enum TrLanguage {
  DA
  EN
}

"""
A filter to be used against TrLanguage fields. All fields are combined with a logical ‘and.’
"""
input TrLanguageFilter {
  """Equal to the specified value."""
  equalTo: TrLanguage

  """Greater than the specified value."""
  greaterThan: TrLanguage

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TrLanguage

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: TrLanguage

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TrLanguage

  """Not equal to the specified value."""
  notEqualTo: TrLanguage
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID
}

"""All input for the `updateEventViaEventTag` mutation."""
input UpdateEventViaEventTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: BigInt!

  """
  An object where the defined keys will be set on the `EventViaEventTag` being updated.
  """
  patch: EventViaEventTagPatch!
  tagId: BigInt!
}

"""The output of our update `EventViaEventTag` mutation."""
type UpdateEventViaEventTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventViaEventTag`."""
  event: Event

  """The `EventViaEventTag` that was updated by this mutation."""
  eventViaEventTag: EventViaEventTag

  """An edge for our `EventViaEventTag`. May be used by Relay 1."""
  eventViaEventTagEdge(
    """The method to use when ordering `EventViaEventTag`."""
    orderBy: [EventViaEventTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaEventTagsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EventTag` that is related to this `EventViaEventTag`."""
  tag: EventTag
}

"""All input for the `updateEventViaGroup` mutation."""
input UpdateEventViaGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: BigInt!
  groupId: BigInt!

  """
  An object where the defined keys will be set on the `EventViaGroup` being updated.
  """
  patch: EventViaGroupPatch!
}

"""The output of our update `EventViaGroup` mutation."""
type UpdateEventViaGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventViaGroup`."""
  event: Event

  """The `EventViaGroup` that was updated by this mutation."""
  eventViaGroup: EventViaGroup

  """An edge for our `EventViaGroup`. May be used by Relay 1."""
  eventViaGroupEdge(
    """The method to use when ordering `EventViaGroup`."""
    orderBy: [EventViaGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventViaGroupsEdge

  """Reads a single `Group` that is related to this `EventViaGroup`."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateImage` mutation."""
input UpdateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  patch: ImagePatch!
}

"""The output of our update `Image` mutation."""
type UpdateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was updated by this mutation."""
  image: Image

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMemberByUsername` mutation."""
input UpdateMemberByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  patch: MemberPatch!
  username: String!
}

"""All input for the `updateMember` mutation."""
input UpdateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  patch: MemberPatch!
}

"""The output of our update `Member` mutation."""
type UpdateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was updated by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNews` mutation."""
input UpdateNewsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `News` being updated.
  """
  patch: NewsPatch!
}

"""The output of our update `News` mutation."""
type UpdateNewsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `News` that was updated by this mutation."""
  news: News

  """An edge for our `News`. May be used by Relay 1."""
  newsEdge(
    """The method to use when ordering `News`."""
    orderBy: [NewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNewsTr` mutation."""
input UpdateNewsTrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  languageCode: TrLanguage!
  newsId: BigInt!

  """
  An object where the defined keys will be set on the `NewsTr` being updated.
  """
  patch: NewsTrPatch!
}

"""The output of our update `NewsTr` mutation."""
type UpdateNewsTrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `News` that is related to this `NewsTr`."""
  news: News

  """The `NewsTr` that was updated by this mutation."""
  newsTr: NewsTr

  """An edge for our `NewsTr`. May be used by Relay 1."""
  newsTrEdge(
    """The method to use when ordering `NewsTr`."""
    orderBy: [NewsTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsTrsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePage` mutation."""
input UpdatePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Page` being updated.
  """
  patch: PagePatch!
}

"""The output of our update `Page` mutation."""
type UpdatePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Page` that was updated by this mutation."""
  page: Page

  """An edge for our `Page`. May be used by Relay 1."""
  pageEdge(
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePageTr` mutation."""
input UpdatePageTrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  languageCode: TrLanguage!
  pageName: String!

  """
  An object where the defined keys will be set on the `PageTr` being updated.
  """
  patch: PageTrPatch!
}

"""The output of our update `PageTr` mutation."""
type UpdatePageTrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Page` that is related to this `PageTr`."""
  pageByPageName: Page

  """The `PageTr` that was updated by this mutation."""
  pageTr: PageTr

  """An edge for our `PageTr`. May be used by Relay 1."""
  pageTrEdge(
    """The method to use when ordering `PageTr`."""
    orderBy: [PageTrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageTrsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePicture` mutation."""
input UpdatePictureInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Picture` being updated.
  """
  patch: PicturePatch!
}

"""The output of our update `Picture` mutation."""
type UpdatePicturePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Image` that is related to this `Picture`."""
  imageByImage: Image

  """The `Picture` that was updated by this mutation."""
  picture: Picture

  """An edge for our `Picture`. May be used by Relay 1."""
  pictureEdge(
    """The method to use when ordering `Picture`."""
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PicturesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `upsertEvent` mutation."""
input UpsertEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  data: EventDatumInput!
  eventId: BigInt
  translations: [EventTrDatumInput]!
}

"""The output of our `upsertEvent` mutation."""
type UpsertEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """Reads a single `Image` that is related to this `Event`."""
  imageByOverrideImage: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `upsertGroup` mutation."""
input UpsertGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  data: GroupDatumInput!
  groupId: BigInt
  translations: [GroupTrDatumInput]!
}

"""The output of our `upsertGroup` mutation."""
type UpsertGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  group: Group

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge

  """Reads a single `Image` that is related to this `Group`."""
  imageByImage: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
