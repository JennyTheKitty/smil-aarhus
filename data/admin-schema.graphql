input AuthenticateInput {
  password: String!
  username: String!
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value."""
  equalTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """Not included in the specified list."""
  notIn: [BigInt!]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the create `EventCategory` mutation."""
input CreateEventCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventCategory` to be created by this mutation."""
  eventCategory: EventCategoryInput!
}

"""The output of our create `EventCategory` mutation."""
type CreateEventCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventCategory` that was created by this mutation."""
  eventCategory: EventCategory

  """An edge for our `EventCategory`. May be used by Relay 1."""
  eventCategoryEdge(
    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Event` mutation."""
input CreateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Event` to be created by this mutation."""
  event: EventInput!
}

"""The output of our create `Event` mutation."""
type CreateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was created by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EventTemplate` mutation."""
input CreateEventTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventTemplate` to be created by this mutation."""
  eventTemplate: EventTemplateInput!
}

"""The output of our create `EventTemplate` mutation."""
type CreateEventTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventTemplate` that was created by this mutation."""
  eventTemplate: EventTemplate

  """An edge for our `EventTemplate`. May be used by Relay 1."""
  eventTemplateEdge(
    """The method to use when ordering `EventTemplate`."""
    orderBy: [EventTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTemplatesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Member` mutation."""
input CreateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Member` to be created by this mutation."""
  member: MemberInput!
}

"""The output of our create `Member` mutation."""
type CreateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was created by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createUploadUrl` mutation."""
input CreateUploadUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  You must provide the content type (or MIME type) of the content you intend
  to upload. For further information about content types, see
  https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
  """
  contentType: String!
}

"""The output of our `createUploadUrl` mutation."""
type CreateUploadUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formData: String!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Upload content to this signed URL."""
  uploadUrl: String!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteEventCategory` mutation."""
input DeleteEventCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `EventCategory` mutation."""
type DeleteEventCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventCategoryNodeId: ID

  """The `EventCategory` that was deleted by this mutation."""
  eventCategory: EventCategory

  """An edge for our `EventCategory`. May be used by Relay 1."""
  eventCategoryEdge(
    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEvent` mutation."""
input DeleteEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Event` mutation."""
type DeleteEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventNodeId: ID

  """The `Event` that was deleted by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEventTemplate` mutation."""
input DeleteEventTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `EventTemplate` mutation."""
type DeleteEventTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventTemplateNodeId: ID

  """The `EventTemplate` that was deleted by this mutation."""
  eventTemplate: EventTemplate

  """An edge for our `EventTemplate`. May be used by Relay 1."""
  eventTemplateEdge(
    """The method to use when ordering `EventTemplate`."""
    orderBy: [EventTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTemplatesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGroupNodeId: ID

  """The `Group` that was deleted by this mutation."""
  group: Group

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMember` mutation."""
input DeleteMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Member` mutation."""
type DeleteMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMemberNodeId: ID

  """The `Member` that was deleted by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Event {
  categoryId: BigInt!
  description: KeyValueHash!
  endsAt: Datetime!
  id: BigInt!
  slug: KeyValueHash
  special: Boolean!
  startsAt: Datetime!
  title: KeyValueHash!
  venue: KeyValueHash!
}

"""A connection to a list of `EventCategory` values."""
type EventCategoriesConnection {
  """
  A list of edges which contains the `EventCategory` and cursor to aid in pagination.
  """
  edges: [EventCategoriesEdge!]!

  """A list of `EventCategory` objects."""
  nodes: [EventCategory!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventCategory` you could get from the connection."""
  totalCount: Int!
}

"""A `EventCategory` edge in the connection."""
type EventCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventCategory` at the end of the edge."""
  node: EventCategory!
}

"""Methods to use when ordering `EventCategory`."""
enum EventCategoriesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

type EventCategory {
  id: BigInt!
  title: KeyValueHash!
}

"""
A condition to be used against `EventCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventCategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `title` field."""
  title: KeyValueHash
}

"""
A filter to be used against `EventCategory` object types. All fields are combined with a logical ‘and.’
"""
input EventCategoryFilter {
  """Checks for all expressions in this list."""
  and: [EventCategoryFilter!]

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Negates the expression."""
  not: EventCategoryFilter

  """Checks for any expressions in this list."""
  or: [EventCategoryFilter!]

  """Filter by the object’s `title` field."""
  title: KeyValueHashFilter
}

"""An input for mutations affecting `EventCategory`"""
input EventCategoryInput {
  title: KeyValueHash!
}

"""
Represents an update to a `EventCategory`. Fields that are set will be updated.
"""
input EventCategoryPatch {
  id: BigInt
  title: KeyValueHash
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `categoryId` field."""
  categoryId: BigInt

  """Checks for equality with the object’s `description` field."""
  description: KeyValueHash

  """Checks for equality with the object’s `endsAt` field."""
  endsAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `slug` field."""
  slug: KeyValueHash

  """Checks for equality with the object’s `special` field."""
  special: Boolean

  """Checks for equality with the object’s `startsAt` field."""
  startsAt: Datetime

  """Checks for equality with the object’s `title` field."""
  title: KeyValueHash

  """Checks for equality with the object’s `venue` field."""
  venue: KeyValueHash
}

"""
A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’
"""
input EventFilter {
  """Checks for all expressions in this list."""
  and: [EventFilter!]

  """Filter by the object’s `categoryId` field."""
  categoryId: BigIntFilter

  """Filter by the object’s `description` field."""
  description: KeyValueHashFilter

  """Filter by the object’s `endsAt` field."""
  endsAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Negates the expression."""
  not: EventFilter

  """Checks for any expressions in this list."""
  or: [EventFilter!]

  """Filter by the object’s `slug` field."""
  slug: KeyValueHashFilter

  """Filter by the object’s `special` field."""
  special: BooleanFilter

  """Filter by the object’s `startsAt` field."""
  startsAt: DatetimeFilter

  """Filter by the object’s `title` field."""
  title: KeyValueHashFilter

  """Filter by the object’s `venue` field."""
  venue: KeyValueHashFilter
}

"""An input for mutations affecting `Event`"""
input EventInput {
  categoryId: BigInt!
  description: KeyValueHash!
  endsAt: Datetime!
  slug: KeyValueHash
  special: Boolean!
  startsAt: Datetime!
  title: KeyValueHash!
  venue: KeyValueHash!
}

"""
Represents an update to a `Event`. Fields that are set will be updated.
"""
input EventPatch {
  categoryId: BigInt
  description: KeyValueHash
  endsAt: Datetime
  id: BigInt
  slug: KeyValueHash
  special: Boolean
  startsAt: Datetime
  title: KeyValueHash
  venue: KeyValueHash
}

type EventTemplate {
  categoryId: BigInt!
  description: KeyValueHash!
  id: BigInt!
  title: KeyValueHash!
  venue: KeyValueHash!
}

"""
A condition to be used against `EventTemplate` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventTemplateCondition {
  """Checks for equality with the object’s `categoryId` field."""
  categoryId: BigInt

  """Checks for equality with the object’s `description` field."""
  description: KeyValueHash

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `title` field."""
  title: KeyValueHash

  """Checks for equality with the object’s `venue` field."""
  venue: KeyValueHash
}

"""
A filter to be used against `EventTemplate` object types. All fields are combined with a logical ‘and.’
"""
input EventTemplateFilter {
  """Checks for all expressions in this list."""
  and: [EventTemplateFilter!]

  """Filter by the object’s `categoryId` field."""
  categoryId: BigIntFilter

  """Filter by the object’s `description` field."""
  description: KeyValueHashFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Negates the expression."""
  not: EventTemplateFilter

  """Checks for any expressions in this list."""
  or: [EventTemplateFilter!]

  """Filter by the object’s `title` field."""
  title: KeyValueHashFilter

  """Filter by the object’s `venue` field."""
  venue: KeyValueHashFilter
}

"""An input for mutations affecting `EventTemplate`"""
input EventTemplateInput {
  categoryId: BigInt!
  description: KeyValueHash!
  title: KeyValueHash!
  venue: KeyValueHash!
}

"""
Represents an update to a `EventTemplate`. Fields that are set will be updated.
"""
input EventTemplatePatch {
  categoryId: BigInt
  description: KeyValueHash
  id: BigInt
  title: KeyValueHash
  venue: KeyValueHash
}

"""A connection to a list of `EventTemplate` values."""
type EventTemplatesConnection {
  """
  A list of edges which contains the `EventTemplate` and cursor to aid in pagination.
  """
  edges: [EventTemplatesEdge!]!

  """A list of `EventTemplate` objects."""
  nodes: [EventTemplate!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventTemplate` you could get from the connection."""
  totalCount: Int!
}

"""A `EventTemplate` edge in the connection."""
type EventTemplatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventTemplate` at the end of the edge."""
  node: EventTemplate!
}

"""Methods to use when ordering `EventTemplate`."""
enum EventTemplatesOrderBy {
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
  VENUE_ASC
  VENUE_DESC
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """A list of `Event` objects."""
  nodes: [Event!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int!
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Event` at the end of the edge."""
  node: Event!
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ENDS_AT_ASC
  ENDS_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  SPECIAL_ASC
  SPECIAL_DESC
  STARTS_AT_ASC
  STARTS_AT_DESC
  TITLE_ASC
  TITLE_DESC
  VENUE_ASC
  VENUE_DESC
}

type Group {
  description: KeyValueHash!
  id: BigInt!
  imageFile: String!
  title: KeyValueHash!
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `description` field."""
  description: KeyValueHash

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `imageFile` field."""
  imageFile: String

  """Checks for equality with the object’s `title` field."""
  title: KeyValueHash
}

"""
A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’
"""
input GroupFilter {
  """Checks for all expressions in this list."""
  and: [GroupFilter!]

  """Filter by the object’s `description` field."""
  description: KeyValueHashFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `imageFile` field."""
  imageFile: StringFilter

  """Negates the expression."""
  not: GroupFilter

  """Checks for any expressions in this list."""
  or: [GroupFilter!]

  """Filter by the object’s `title` field."""
  title: KeyValueHashFilter
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  description: KeyValueHash!
  imageFile: String!
  title: KeyValueHash!
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  description: KeyValueHash
  id: BigInt
  imageFile: String
  title: KeyValueHash
}

"""A connection to a list of `Group` values."""
type GroupsConnection {
  """
  A list of edges which contains the `Group` and cursor to aid in pagination.
  """
  edges: [GroupsEdge!]!

  """A list of `Group` objects."""
  nodes: [Group!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection."""
type GroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group!
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IMAGE_FILE_ASC
  IMAGE_FILE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""
A set of key/value pairs, keys are strings, values may be a string or null. Exposed as a JSON object.
"""
scalar KeyValueHash

"""
A filter to be used against KeyValueHash fields. All fields are combined with a logical ‘and.’
"""
input KeyValueHashFilter {
  """Contained by the specified KeyValueHash."""
  containedBy: KeyValueHash

  """Contains the specified KeyValueHash."""
  contains: KeyValueHash

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: KeyValueHash

  """Equal to the specified value."""
  equalTo: KeyValueHash

  """Included in the specified list."""
  in: [KeyValueHash!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: KeyValueHash

  """Not equal to the specified value."""
  notEqualTo: KeyValueHash

  """Not included in the specified list."""
  notIn: [KeyValueHash!]
}

type Member {
  id: UUID!
  isActive: Boolean
  name: String
  userRole: String
  username: String
}

"""
A condition to be used against `Member` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MemberCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isActive` field."""
  isActive: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `userRole` field."""
  userRole: String

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""
A filter to be used against `Member` object types. All fields are combined with a logical ‘and.’
"""
input MemberFilter {
  """Checks for all expressions in this list."""
  and: [MemberFilter!]

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isActive` field."""
  isActive: BooleanFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: MemberFilter

  """Checks for any expressions in this list."""
  or: [MemberFilter!]

  """Filter by the object’s `userRole` field."""
  userRole: StringFilter

  """Filter by the object’s `username` field."""
  username: StringFilter
}

"""An input for mutations affecting `Member`"""
input MemberInput {
  id: UUID!
  isActive: Boolean
  name: String
  userRole: String
  username: String
}

"""
Represents an update to a `Member`. Fields that are set will be updated.
"""
input MemberPatch {
  id: UUID
  isActive: Boolean
  name: String
  userRole: String
  username: String
}

"""A connection to a list of `Member` values."""
type MembersConnection {
  """
  A list of edges which contains the `Member` and cursor to aid in pagination.
  """
  edges: [MembersEdge!]!

  """A list of `Member` objects."""
  nodes: [Member!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Member` you could get from the connection."""
  totalCount: Int!
}

"""A `Member` edge in the connection."""
type MembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Member` at the end of the edge."""
  node: Member!
}

"""Methods to use when ordering `Member`."""
enum MembersOrderBy {
  ID_ASC
  ID_DESC
  IS_ACTIVE_ASC
  IS_ACTIVE_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
  USER_ROLE_ASC
  USER_ROLE_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): String!

  """Creates a single `Event`."""
  createEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventInput!
  ): CreateEventPayload

  """Creates a single `EventCategory`."""
  createEventCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventCategoryInput!
  ): CreateEventCategoryPayload

  """Creates a single `EventTemplate`."""
  createEventTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventTemplateInput!
  ): CreateEventTemplatePayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `Member`."""
  createMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMemberInput!
  ): CreateMemberPayload

  """Get a signed URL for uploading files. It will expire in 5 minutes."""
  createUploadUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUploadUrlInput!
  ): CreateUploadUrlPayload

  """Deletes a single `Event` using a unique key."""
  deleteEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventInput!
  ): DeleteEventPayload

  """Deletes a single `EventCategory` using a unique key."""
  deleteEventCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventCategoryInput!
  ): DeleteEventCategoryPayload

  """Deletes a single `EventTemplate` using a unique key."""
  deleteEventTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventTemplateInput!
  ): DeleteEventTemplatePayload

  """Deletes a single `Group` using a unique key."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Member` using a unique key."""
  deleteMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberInput!
  ): DeleteMemberPayload
  logout: Boolean

  """Updates a single `Event` using a unique key and a patch."""
  updateEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventInput!
  ): UpdateEventPayload

  """Updates a single `EventCategory` using a unique key and a patch."""
  updateEventCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventCategoryInput!
  ): UpdateEventCategoryPayload

  """Updates a single `EventTemplate` using a unique key and a patch."""
  updateEventTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventTemplateInput!
  ): UpdateEventTemplatePayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Member` using a unique key and a patch."""
  updateMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberInput!
  ): UpdateMemberPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  currentMember: Member
  event(id: BigInt!): Event

  """Reads and enables pagination through a set of `EventCategory`."""
  eventCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesConnection
  eventCategory(id: BigInt!): EventCategory
  eventTemplate(id: BigInt!): EventTemplate

  """Reads and enables pagination through a set of `EventTemplate`."""
  eventTemplates(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTemplateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventTemplateFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventTemplate`."""
    orderBy: [EventTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTemplatesConnection

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection
  group(id: BigInt!): Group

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection
  member(id: UUID!): Member

  """Reads and enables pagination through a set of `Member`."""
  members(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MemberFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateEventCategory` mutation."""
input UpdateEventCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `EventCategory` being updated.
  """
  patch: EventCategoryPatch!
}

"""The output of our update `EventCategory` mutation."""
type UpdateEventCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventCategory` that was updated by this mutation."""
  eventCategory: EventCategory

  """An edge for our `EventCategory`. May be used by Relay 1."""
  eventCategoryEdge(
    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEvent` mutation."""
input UpdateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
}

"""The output of our update `Event` mutation."""
type UpdateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was updated by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEventTemplate` mutation."""
input UpdateEventTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `EventTemplate` being updated.
  """
  patch: EventTemplatePatch!
}

"""The output of our update `EventTemplate` mutation."""
type UpdateEventTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventTemplate` that was updated by this mutation."""
  eventTemplate: EventTemplate

  """An edge for our `EventTemplate`. May be used by Relay 1."""
  eventTemplateEdge(
    """The method to use when ordering `EventTemplate`."""
    orderBy: [EventTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventTemplatesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMember` mutation."""
input UpdateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  patch: MemberPatch!
}

"""The output of our update `Member` mutation."""
type UpdateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was updated by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
