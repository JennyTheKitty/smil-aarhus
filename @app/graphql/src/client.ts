/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /**
   * A signed eight-byte integer. The upper big integer values are greater than the
   * max value for a JavaScript number. Therefore all big integers will be output as
   * strings and not numbers.
   */
  BigInt: any;
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: any;
  /**
   * A point in time as described by the [ISO
   * 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
   */
  Datetime: string;
  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */
  UUID: any;
};

export type AuthenticateInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

/** A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’ */
export type BigIntFilter = {
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['BigInt']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['BigInt']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['BigInt']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['BigInt']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['BigInt']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['BigInt']>;
};

/** A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’ */
export type BooleanFilter = {
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Boolean']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Boolean']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Boolean']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Boolean']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Boolean']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Boolean']>;
};

/** All input for the create `Image` mutation. */
export type CreateImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Image` to be created by this mutation. */
  image: ImageInput;
};

/** The output of our create `Image` mutation. */
export type CreateImagePayload = {
  __typename?: 'CreateImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** The `Image` that was created by this mutation. */
  image: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};

/** All input for the create `News` mutation. */
export type CreateNewsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `News` to be created by this mutation. */
  news: NewsInput;
};

/** The output of our create `News` mutation. */
export type CreateNewsPayload = {
  __typename?: 'CreateNewsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** The `News` that was created by this mutation. */
  news: Maybe<News>;
  /** An edge for our `News`. May be used by Relay 1. */
  newsEdge: Maybe<NewsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our create `News` mutation. */
export type CreateNewsPayloadNewsEdgeArgs = {
  orderBy?: InputMaybe<Array<NewsOrderBy>>;
};

/** All input for the create `Page` mutation. */
export type CreatePageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Page` to be created by this mutation. */
  page: PageInput;
};

/** The output of our create `Page` mutation. */
export type CreatePagePayload = {
  __typename?: 'CreatePagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** The `Page` that was created by this mutation. */
  page: Maybe<Page>;
  /** An edge for our `Page`. May be used by Relay 1. */
  pageEdge: Maybe<PagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our create `Page` mutation. */
export type CreatePagePayloadPageEdgeArgs = {
  orderBy?: InputMaybe<Array<PagesOrderBy>>;
};

/** All input for the create `Picture` mutation. */
export type CreatePictureInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Picture` to be created by this mutation. */
  picture: PictureInput;
};

/** The output of our create `Picture` mutation. */
export type CreatePicturePayload = {
  __typename?: 'CreatePicturePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `Picture`. */
  imageByImage: Maybe<Image>;
  /** The `Picture` that was created by this mutation. */
  picture: Maybe<Picture>;
  /** An edge for our `Picture`. May be used by Relay 1. */
  pictureEdge: Maybe<PicturesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our create `Picture` mutation. */
export type CreatePicturePayloadPictureEdgeArgs = {
  orderBy?: InputMaybe<Array<PicturesOrderBy>>;
};

/** All input for the `createUploadUrl` mutation. */
export type CreateUploadUrlInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /**
   * You must provide the content type (or MIME type) of the content you intend
   * to upload. For further information about content types, see
   * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
   */
  contentType: Scalars['String'];
};

/** The output of our `createUploadUrl` mutation. */
export type CreateUploadUrlPayload = {
  __typename?: 'CreateUploadUrlPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  formData: Scalars['String'];
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
  /** Upload content to this signed URL. */
  uploadUrl: Scalars['String'];
};

/** A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’ */
export type DatetimeFilter = {
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Datetime']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Datetime']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Datetime']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Datetime']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Datetime']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Datetime']>;
};

/** All input for the `deleteImage` mutation. */
export type DeleteImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['BigInt'];
};

/** The output of our delete `Image` mutation. */
export type DeleteImagePayload = {
  __typename?: 'DeleteImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  deletedImageNodeId: Maybe<Scalars['ID']>;
  /** The `Image` that was deleted by this mutation. */
  image: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};

/** All input for the `deleteNews` mutation. */
export type DeleteNewsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['BigInt'];
};

/** The output of our delete `News` mutation. */
export type DeleteNewsPayload = {
  __typename?: 'DeleteNewsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  deletedNewsNodeId: Maybe<Scalars['ID']>;
  /** The `News` that was deleted by this mutation. */
  news: Maybe<News>;
  /** An edge for our `News`. May be used by Relay 1. */
  newsEdge: Maybe<NewsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our delete `News` mutation. */
export type DeleteNewsPayloadNewsEdgeArgs = {
  orderBy?: InputMaybe<Array<NewsOrderBy>>;
};

/** All input for the `deletePage` mutation. */
export type DeletePageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** The output of our delete `Page` mutation. */
export type DeletePagePayload = {
  __typename?: 'DeletePagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  deletedPageNodeId: Maybe<Scalars['ID']>;
  /** The `Page` that was deleted by this mutation. */
  page: Maybe<Page>;
  /** An edge for our `Page`. May be used by Relay 1. */
  pageEdge: Maybe<PagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our delete `Page` mutation. */
export type DeletePagePayloadPageEdgeArgs = {
  orderBy?: InputMaybe<Array<PagesOrderBy>>;
};

/** All input for the `deletePicture` mutation. */
export type DeletePictureInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['BigInt'];
};

/** The output of our delete `Picture` mutation. */
export type DeletePicturePayload = {
  __typename?: 'DeletePicturePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  deletedPictureNodeId: Maybe<Scalars['ID']>;
  /** Reads a single `Image` that is related to this `Picture`. */
  imageByImage: Maybe<Image>;
  /** The `Picture` that was deleted by this mutation. */
  picture: Maybe<Picture>;
  /** An edge for our `Picture`. May be used by Relay 1. */
  pictureEdge: Maybe<PicturesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our delete `Picture` mutation. */
export type DeletePicturePayloadPictureEdgeArgs = {
  orderBy?: InputMaybe<Array<PicturesOrderBy>>;
};

export type Event = {
  __typename?: 'Event';
  endsAt: Scalars['Datetime'];
  /** Reads and enables pagination through a set of `EventViaGroup`. */
  groups: EventViaGroupsConnection;
  id: Scalars['BigInt'];
  /** Reads a single `Image` that is related to this `Event`. */
  imageByOverrideImage: Maybe<Image>;
  img: Maybe<ResponsiveImage>;
  overrideImage: Maybe<Scalars['BigInt']>;
  special: Scalars['Boolean'];
  startsAt: Scalars['Datetime'];
  /** Reads and enables pagination through a set of `EventViaEventTag`. */
  tags: EventViaEventTagsConnection;
  templateName: Maybe<Scalars['String']>;
  /** Reads and enables pagination through a set of `EventTr`. */
  translations: EventTrsConnection;
};


export type EventGroupsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<EventViaGroupCondition>;
  filter?: InputMaybe<EventViaGroupFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type EventTagsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type EventTranslationsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<EventTrCondition>;
  filter?: InputMaybe<EventTrFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type EventCondition = {
  /** Checks for equality with the object’s `endsAt` field. */
  endsAt?: InputMaybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `overrideImage` field. */
  overrideImage?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `special` field. */
  special?: InputMaybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `startsAt` field. */
  startsAt?: InputMaybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `templateName` field. */
  templateName?: InputMaybe<Scalars['String']>;
};

/** An input for mutations affecting `EventDatum` */
export type EventDatumInput = {
  endsAt: Scalars['Datetime'];
  groupIds?: InputMaybe<Array<InputMaybe<Scalars['BigInt']>>>;
  overrideImage?: InputMaybe<Scalars['BigInt']>;
  special: Scalars['Boolean'];
  startsAt: Scalars['Datetime'];
  tagIds?: InputMaybe<Array<InputMaybe<Scalars['BigInt']>>>;
  templateName?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’ */
export type EventFilter = {
  /** Filter by the object’s `endsAt` field. */
  endsAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `overrideImage` field. */
  overrideImage?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `special` field. */
  special?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `startsAt` field. */
  startsAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `templateName` field. */
  templateName?: InputMaybe<StringFilter>;
};

export type EventTag = {
  __typename?: 'EventTag';
  /** Reads and enables pagination through a set of `EventViaEventTag`. */
  events: EventViaEventTagsConnection;
  id: Scalars['BigInt'];
  image: Maybe<Scalars['BigInt']>;
  /** Reads a single `Image` that is related to this `EventTag`. */
  imageByImage: Maybe<Image>;
  img: ResponsiveImage;
  /** Reads and enables pagination through a set of `EventTagTr`. */
  translations: EventTagTrsConnection;
};


export type EventTagEventsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type EventTagTranslationsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<EventTagTrCondition>;
  filter?: InputMaybe<EventTagTrFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/**
 * A condition to be used against `EventTag` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type EventTagCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `image` field. */
  image?: InputMaybe<Scalars['BigInt']>;
};

/** A filter to be used against `EventTag` object types. All fields are combined with a logical ‘and.’ */
export type EventTagFilter = {
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `image` field. */
  image?: InputMaybe<BigIntFilter>;
};

export type EventTagTr = {
  __typename?: 'EventTagTr';
  languageCode: TrLanguage;
  /** Reads a single `EventTag` that is related to this `EventTagTr`. */
  tag: Maybe<EventTag>;
  tagId: Scalars['BigInt'];
  title: Scalars['String'];
};

/**
 * A condition to be used against `EventTagTr` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type EventTagTrCondition = {
  /** Checks for equality with the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguage>;
  /** Checks for equality with the object’s `tagId` field. */
  tagId?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `EventTagTr` object types. All fields are combined with a logical ‘and.’ */
export type EventTagTrFilter = {
  /** Filter by the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguageFilter>;
  /** Filter by the object’s `tagId` field. */
  tagId?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
};

/** A connection to a list of `EventTagTr` values. */
export type EventTagTrsConnection = {
  __typename?: 'EventTagTrsConnection';
  /** A list of edges which contains the `EventTagTr` and cursor to aid in pagination. */
  edges: Array<EventTagTrsEdge>;
  /** A list of `EventTagTr` objects. */
  nodes: Array<EventTagTr>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EventTagTr` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `EventTagTr` edge in the connection. */
export type EventTagTrsEdge = {
  __typename?: 'EventTagTrsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `EventTagTr` at the end of the edge. */
  node: EventTagTr;
};

/** A connection to a list of `EventTag` values. */
export type EventTagsConnection = {
  __typename?: 'EventTagsConnection';
  /** A list of edges which contains the `EventTag` and cursor to aid in pagination. */
  edges: Array<EventTagsEdge>;
  /** A list of `EventTag` objects. */
  nodes: Array<EventTag>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EventTag` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `EventTag` edge in the connection. */
export type EventTagsEdge = {
  __typename?: 'EventTagsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `EventTag` at the end of the edge. */
  node: EventTag;
};

export type EventTr = {
  __typename?: 'EventTr';
  description: Scalars['String'];
  /** Reads a single `Event` that is related to this `EventTr`. */
  event: Maybe<Event>;
  eventId: Scalars['BigInt'];
  languageCode: TrLanguage;
  slug: Scalars['String'];
  title: Scalars['String'];
};

/** A condition to be used against `EventTr` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type EventTrCondition = {
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `eventId` field. */
  eventId?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguage>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']>;
};

/** An input for mutations affecting `EventTrDatum` */
export type EventTrDatumInput = {
  description: Scalars['String'];
  languageCode: Scalars['String'];
  title: Scalars['String'];
};

/** A filter to be used against `EventTr` object types. All fields are combined with a logical ‘and.’ */
export type EventTrFilter = {
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eventId` field. */
  eventId?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguageFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: InputMaybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
};

/** A connection to a list of `EventTr` values. */
export type EventTrsConnection = {
  __typename?: 'EventTrsConnection';
  /** A list of edges which contains the `EventTr` and cursor to aid in pagination. */
  edges: Array<EventTrsEdge>;
  /** A list of `EventTr` objects. */
  nodes: Array<EventTr>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EventTr` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `EventTr` edge in the connection. */
export type EventTrsEdge = {
  __typename?: 'EventTrsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `EventTr` at the end of the edge. */
  node: EventTr;
};

export type EventViaEventTag = {
  __typename?: 'EventViaEventTag';
  /** Reads a single `Event` that is related to this `EventViaEventTag`. */
  event: Maybe<Event>;
  eventId: Scalars['BigInt'];
  /** Reads a single `EventTag` that is related to this `EventViaEventTag`. */
  tag: Maybe<EventTag>;
  tagId: Scalars['BigInt'];
};

/** A connection to a list of `EventViaEventTag` values. */
export type EventViaEventTagsConnection = {
  __typename?: 'EventViaEventTagsConnection';
  /** A list of edges which contains the `EventViaEventTag` and cursor to aid in pagination. */
  edges: Array<EventViaEventTagsEdge>;
  /** A list of `EventViaEventTag` objects. */
  nodes: Array<EventViaEventTag>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EventViaEventTag` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `EventViaEventTag` edge in the connection. */
export type EventViaEventTagsEdge = {
  __typename?: 'EventViaEventTagsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `EventViaEventTag` at the end of the edge. */
  node: EventViaEventTag;
};

export type EventViaGroup = {
  __typename?: 'EventViaGroup';
  /** Reads a single `Event` that is related to this `EventViaGroup`. */
  event: Maybe<Event>;
  eventId: Scalars['BigInt'];
  /** Reads a single `Group` that is related to this `EventViaGroup`. */
  group: Maybe<Group>;
  groupId: Scalars['BigInt'];
};

/**
 * A condition to be used against `EventViaGroup` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type EventViaGroupCondition = {
  /** Checks for equality with the object’s `eventId` field. */
  eventId?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `groupId` field. */
  groupId?: InputMaybe<Scalars['BigInt']>;
};

/** A filter to be used against `EventViaGroup` object types. All fields are combined with a logical ‘and.’ */
export type EventViaGroupFilter = {
  /** Filter by the object’s `eventId` field. */
  eventId?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `groupId` field. */
  groupId?: InputMaybe<BigIntFilter>;
};

/** A connection to a list of `EventViaGroup` values. */
export type EventViaGroupsConnection = {
  __typename?: 'EventViaGroupsConnection';
  /** A list of edges which contains the `EventViaGroup` and cursor to aid in pagination. */
  edges: Array<EventViaGroupsEdge>;
  /** A list of `EventViaGroup` objects. */
  nodes: Array<EventViaGroup>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EventViaGroup` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `EventViaGroup` edge in the connection. */
export type EventViaGroupsEdge = {
  __typename?: 'EventViaGroupsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `EventViaGroup` at the end of the edge. */
  node: EventViaGroup;
};

/** A connection to a list of `Event` values. */
export type EventsConnection = {
  __typename?: 'EventsConnection';
  /** A list of edges which contains the `Event` and cursor to aid in pagination. */
  edges: Array<EventsEdge>;
  /** A list of `Event` objects. */
  nodes: Array<Event>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Event` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Event` edge in the connection. */
export type EventsEdge = {
  __typename?: 'EventsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `Event` at the end of the edge. */
  node: Event;
};

/** Methods to use when ordering `Event`. */
export enum EventsOrderBy {
  EndsAtAsc = 'ENDS_AT_ASC',
  EndsAtDesc = 'ENDS_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  OverrideImageAsc = 'OVERRIDE_IMAGE_ASC',
  OverrideImageDesc = 'OVERRIDE_IMAGE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SpecialAsc = 'SPECIAL_ASC',
  SpecialDesc = 'SPECIAL_DESC',
  StartsAtAsc = 'STARTS_AT_ASC',
  StartsAtDesc = 'STARTS_AT_DESC',
  TemplateNameAsc = 'TEMPLATE_NAME_ASC',
  TemplateNameDesc = 'TEMPLATE_NAME_DESC'
}

export type Group = {
  __typename?: 'Group';
  /** Reads and enables pagination through a set of `EventViaGroup`. */
  events: EventViaGroupsConnection;
  id: Scalars['BigInt'];
  image: Maybe<Scalars['BigInt']>;
  /** Reads a single `Image` that is related to this `Group`. */
  imageByImage: Maybe<Image>;
  img: ResponsiveImage;
  isOpen: Scalars['Boolean'];
  /** Reads and enables pagination through a set of `GroupTr`. */
  translations: GroupTrsConnection;
};


export type GroupEventsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<EventViaGroupCondition>;
  filter?: InputMaybe<EventViaGroupFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type GroupTranslationsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<GroupTrCondition>;
  filter?: InputMaybe<GroupTrFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type GroupCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `image` field. */
  image?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `isOpen` field. */
  isOpen?: InputMaybe<Scalars['Boolean']>;
};

/** An input for mutations affecting `GroupDatum` */
export type GroupDatumInput = {
  image: Scalars['BigInt'];
  isOpen: Scalars['Boolean'];
};

/** A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’ */
export type GroupFilter = {
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `image` field. */
  image?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `isOpen` field. */
  isOpen?: InputMaybe<BooleanFilter>;
};

export type GroupTr = {
  __typename?: 'GroupTr';
  activity: Scalars['String'];
  description: Scalars['String'];
  /** Reads a single `Group` that is related to this `GroupTr`. */
  group: Maybe<Group>;
  groupId: Scalars['BigInt'];
  languageCode: TrLanguage;
  shortDescription: Scalars['String'];
  slug: Scalars['String'];
  title: Scalars['String'];
};

/** A condition to be used against `GroupTr` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type GroupTrCondition = {
  /** Checks for equality with the object’s `activity` field. */
  activity?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `groupId` field. */
  groupId?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguage>;
  /** Checks for equality with the object’s `shortDescription` field. */
  shortDescription?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']>;
};

/** An input for mutations affecting `GroupTrDatum` */
export type GroupTrDatumInput = {
  activity: Scalars['String'];
  description: Scalars['String'];
  languageCode: Scalars['String'];
  shortDescription: Scalars['String'];
  title: Scalars['String'];
};

/** A filter to be used against `GroupTr` object types. All fields are combined with a logical ‘and.’ */
export type GroupTrFilter = {
  /** Filter by the object’s `activity` field. */
  activity?: InputMaybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `groupId` field. */
  groupId?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguageFilter>;
  /** Filter by the object’s `shortDescription` field. */
  shortDescription?: InputMaybe<StringFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: InputMaybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
};

/** A connection to a list of `GroupTr` values. */
export type GroupTrsConnection = {
  __typename?: 'GroupTrsConnection';
  /** A list of edges which contains the `GroupTr` and cursor to aid in pagination. */
  edges: Array<GroupTrsEdge>;
  /** A list of `GroupTr` objects. */
  nodes: Array<GroupTr>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `GroupTr` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `GroupTr` edge in the connection. */
export type GroupTrsEdge = {
  __typename?: 'GroupTrsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `GroupTr` at the end of the edge. */
  node: GroupTr;
};

/** A connection to a list of `Group` values. */
export type GroupsConnection = {
  __typename?: 'GroupsConnection';
  /** A list of edges which contains the `Group` and cursor to aid in pagination. */
  edges: Array<GroupsEdge>;
  /** A list of `Group` objects. */
  nodes: Array<Group>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Group` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Group` edge in the connection. */
export type GroupsEdge = {
  __typename?: 'GroupsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `Group` at the end of the edge. */
  node: Group;
};

/** Methods to use when ordering `Group`. */
export enum GroupsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ImageAsc = 'IMAGE_ASC',
  ImageDesc = 'IMAGE_DESC',
  IsOpenAsc = 'IS_OPEN_ASC',
  IsOpenDesc = 'IS_OPEN_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Image = {
  __typename?: 'Image';
  credit: Scalars['String'];
  /** Reads and enables pagination through a set of `EventTag`. */
  eventTagsByImage: EventTagsConnection;
  /** Reads and enables pagination through a set of `Event`. */
  eventsByOverrideImage: EventsConnection;
  /** Reads and enables pagination through a set of `Group`. */
  groupsByImage: GroupsConnection;
  height: Scalars['Int'];
  id: Scalars['BigInt'];
  img: ResponsiveImage;
  path: Scalars['String'];
  /** Reads and enables pagination through a set of `Picture`. */
  picturesByImage: PicturesConnection;
  width: Scalars['Int'];
};


export type ImageEventTagsByImageArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<EventTagCondition>;
  filter?: InputMaybe<EventTagFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type ImageEventsByOverrideImageArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<EventCondition>;
  filter?: InputMaybe<EventFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<EventsOrderBy>>;
};


export type ImageGroupsByImageArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<GroupCondition>;
  filter?: InputMaybe<GroupFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<GroupsOrderBy>>;
};


export type ImagePicturesByImageArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<PicturesOrderBy>>;
};

/** An input for mutations affecting `Image` */
export type ImageInput = {
  credit: Scalars['String'];
  height: Scalars['Int'];
  id?: InputMaybe<Scalars['BigInt']>;
  path: Scalars['String'];
  width: Scalars['Int'];
};

/** Represents an update to a `Image`. Fields that are set will be updated. */
export type ImagePatch = {
  credit?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['BigInt']>;
  path?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

/** A `Image` edge in the connection. */
export type ImagesEdge = {
  __typename?: 'ImagesEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `Image` at the end of the edge. */
  node: Image;
};

export type InfoPage = {
  __typename?: 'InfoPage';
  icon: Scalars['String'];
  name: Scalars['String'];
  /** Reads a single `Page` that is related to this `InfoPage`. */
  pageByName: Maybe<Page>;
  rank: Scalars['Int'];
  /** Reads and enables pagination through a set of `InfoPageTr`. */
  translations: InfoPageTrsConnection;
};


export type InfoPageTranslationsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** An input for mutations affecting `InfoPageDatum` */
export type InfoPageDatumInput = {
  icon: Scalars['String'];
};

export type InfoPageTr = {
  __typename?: 'InfoPageTr';
  /** Reads a single `InfoPage` that is related to this `InfoPageTr`. */
  infoPageByInfoPageName: Maybe<InfoPage>;
  infoPageName: Scalars['String'];
  languageCode: TrLanguage;
  subtitle: Scalars['String'];
  title: Scalars['String'];
};

/** An input for mutations affecting `InfoPageTrDatum` */
export type InfoPageTrDatumInput = {
  languageCode: Scalars['String'];
  subtitle: Scalars['String'];
  title: Scalars['String'];
};

/** A connection to a list of `InfoPageTr` values. */
export type InfoPageTrsConnection = {
  __typename?: 'InfoPageTrsConnection';
  /** A list of edges which contains the `InfoPageTr` and cursor to aid in pagination. */
  edges: Array<InfoPageTrsEdge>;
  /** A list of `InfoPageTr` objects. */
  nodes: Array<InfoPageTr>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `InfoPageTr` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `InfoPageTr` edge in the connection. */
export type InfoPageTrsEdge = {
  __typename?: 'InfoPageTrsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `InfoPageTr` at the end of the edge. */
  node: InfoPageTr;
};

/** A connection to a list of `InfoPage` values. */
export type InfoPagesConnection = {
  __typename?: 'InfoPagesConnection';
  /** A list of edges which contains the `InfoPage` and cursor to aid in pagination. */
  edges: Array<InfoPagesEdge>;
  /** A list of `InfoPage` objects. */
  nodes: Array<InfoPage>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `InfoPage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `InfoPage` edge in the connection. */
export type InfoPagesEdge = {
  __typename?: 'InfoPagesEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `InfoPage` at the end of the edge. */
  node: InfoPage;
};

/** Methods to use when ordering `InfoPage`. */
export enum InfoPagesOrderBy {
  IconAsc = 'ICON_ASC',
  IconDesc = 'ICON_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RankAsc = 'RANK_ASC',
  RankDesc = 'RANK_DESC'
}

export type Member = {
  __typename?: 'Member';
  id: Scalars['UUID'];
  isActive: Scalars['Boolean'];
  name: Scalars['String'];
  userRole: Scalars['String'];
  username: Scalars['String'];
};

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
  __typename?: 'Mutation';
  authenticate: Scalars['String'];
  /** Creates a single `Image`. */
  createImage: Maybe<CreateImagePayload>;
  /** Creates a single `News`. */
  createNews: Maybe<CreateNewsPayload>;
  /** Creates a single `Page`. */
  createPage: Maybe<CreatePagePayload>;
  /** Creates a single `Picture`. */
  createPicture: Maybe<CreatePicturePayload>;
  /** Get a signed URL for uploading files. It will expire in 5 minutes. */
  createUploadUrl: Maybe<CreateUploadUrlPayload>;
  /** Deletes a single `Image` using a unique key. */
  deleteImage: Maybe<DeleteImagePayload>;
  /** Deletes a single `News` using a unique key. */
  deleteNews: Maybe<DeleteNewsPayload>;
  /** Deletes a single `Page` using a unique key. */
  deletePage: Maybe<DeletePagePayload>;
  /** Deletes a single `Picture` using a unique key. */
  deletePicture: Maybe<DeletePicturePayload>;
  logout: Maybe<Scalars['Boolean']>;
  reorderPictures: Maybe<ReorderPicturesPayload>;
  /** Updates a single `Image` using a unique key and a patch. */
  updateImage: Maybe<UpdateImagePayload>;
  /** Updates a single `News` using a unique key and a patch. */
  updateNews: Maybe<UpdateNewsPayload>;
  /** Updates a single `Page` using a unique key and a patch. */
  updatePage: Maybe<UpdatePagePayload>;
  /** Updates a single `PageTr` using a unique key and a patch. */
  updatePageTr: Maybe<UpdatePageTrPayload>;
  /** Updates a single `Picture` using a unique key and a patch. */
  updatePicture: Maybe<UpdatePicturePayload>;
  upsertEvent: Maybe<UpsertEventPayload>;
  upsertGroup: Maybe<UpsertGroupPayload>;
  upsertInfoPage: Maybe<UpsertInfoPagePayload>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAuthenticateArgs = {
  input: AuthenticateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateImageArgs = {
  input: CreateImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNewsArgs = {
  input: CreateNewsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePageArgs = {
  input: CreatePageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePictureArgs = {
  input: CreatePictureInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUploadUrlArgs = {
  input: CreateUploadUrlInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteImageArgs = {
  input: DeleteImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteNewsArgs = {
  input: DeleteNewsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePageArgs = {
  input: DeletePageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePictureArgs = {
  input: DeletePictureInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationReorderPicturesArgs = {
  input: ReorderPicturesInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateImageArgs = {
  input: UpdateImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateNewsArgs = {
  input: UpdateNewsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePageArgs = {
  input: UpdatePageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePageTrArgs = {
  input: UpdatePageTrInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePictureArgs = {
  input: UpdatePictureInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertEventArgs = {
  input: UpsertEventInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertGroupArgs = {
  input: UpsertGroupInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertInfoPageArgs = {
  input: UpsertInfoPageInput;
};

export type News = {
  __typename?: 'News';
  id: Scalars['BigInt'];
  publishedAt: Scalars['Datetime'];
  /** Reads and enables pagination through a set of `NewsTr`. */
  translations: NewsTrsConnection;
  updatedAt: Scalars['Datetime'];
};


export type NewsTranslationsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<NewsTrCondition>;
  filter?: InputMaybe<NewsTrFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** A condition to be used against `News` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type NewsCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `publishedAt` field. */
  publishedAt?: InputMaybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: InputMaybe<Scalars['Datetime']>;
};

/** A connection to a list of `News` values. */
export type NewsConnection = {
  __typename?: 'NewsConnection';
  /** A list of edges which contains the `News` and cursor to aid in pagination. */
  edges: Array<NewsEdge>;
  /** A list of `News` objects. */
  nodes: Array<News>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `News` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `News` edge in the connection. */
export type NewsEdge = {
  __typename?: 'NewsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `News` at the end of the edge. */
  node: News;
};

/** A filter to be used against `News` object types. All fields are combined with a logical ‘and.’ */
export type NewsFilter = {
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `publishedAt` field. */
  publishedAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: InputMaybe<DatetimeFilter>;
};

/** An input for mutations affecting `News` */
export type NewsInput = {
  id?: InputMaybe<Scalars['BigInt']>;
  publishedAt: Scalars['Datetime'];
  updatedAt: Scalars['Datetime'];
};

/** Methods to use when ordering `News`. */
export enum NewsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  PublishedAtAsc = 'PUBLISHED_AT_ASC',
  PublishedAtDesc = 'PUBLISHED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** Represents an update to a `News`. Fields that are set will be updated. */
export type NewsPatch = {
  id?: InputMaybe<Scalars['BigInt']>;
  publishedAt?: InputMaybe<Scalars['Datetime']>;
  updatedAt?: InputMaybe<Scalars['Datetime']>;
};

export type NewsTr = {
  __typename?: 'NewsTr';
  content: Scalars['String'];
  languageCode: TrLanguage;
  /** Reads a single `News` that is related to this `NewsTr`. */
  news: Maybe<News>;
  newsId: Scalars['BigInt'];
  title: Scalars['String'];
};

/** A condition to be used against `NewsTr` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type NewsTrCondition = {
  /** Checks for equality with the object’s `content` field. */
  content?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguage>;
  /** Checks for equality with the object’s `newsId` field. */
  newsId?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `NewsTr` object types. All fields are combined with a logical ‘and.’ */
export type NewsTrFilter = {
  /** Filter by the object’s `content` field. */
  content?: InputMaybe<StringFilter>;
  /** Filter by the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguageFilter>;
  /** Filter by the object’s `newsId` field. */
  newsId?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
};

/** A connection to a list of `NewsTr` values. */
export type NewsTrsConnection = {
  __typename?: 'NewsTrsConnection';
  /** A list of edges which contains the `NewsTr` and cursor to aid in pagination. */
  edges: Array<NewsTrsEdge>;
  /** A list of `NewsTr` objects. */
  nodes: Array<NewsTr>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `NewsTr` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `NewsTr` edge in the connection. */
export type NewsTrsEdge = {
  __typename?: 'NewsTrsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `NewsTr` at the end of the edge. */
  node: NewsTr;
};

export type Page = {
  __typename?: 'Page';
  /** Reads a single `InfoPage` that is related to this `Page`. */
  infoPageByName: Maybe<InfoPage>;
  name: Scalars['String'];
  /** Reads and enables pagination through a set of `PageTr`. */
  translations: PageTrsConnection;
};


export type PageTranslationsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<PageTrCondition>;
  filter?: InputMaybe<PageTrFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** A condition to be used against `Page` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type PageCondition = {
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `Page` object types. All fields are combined with a logical ‘and.’ */
export type PageFilter = {
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor: Maybe<Scalars['Cursor']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor: Maybe<Scalars['Cursor']>;
};

/** An input for mutations affecting `Page` */
export type PageInput = {
  name: Scalars['String'];
};

/** Represents an update to a `Page`. Fields that are set will be updated. */
export type PagePatch = {
  name?: InputMaybe<Scalars['String']>;
};

export type PageTr = {
  __typename?: 'PageTr';
  content: Scalars['String'];
  languageCode: TrLanguage;
  /** Reads a single `Page` that is related to this `PageTr`. */
  pageByPageName: Maybe<Page>;
  pageName: Scalars['String'];
};

/** A condition to be used against `PageTr` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type PageTrCondition = {
  /** Checks for equality with the object’s `content` field. */
  content?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguage>;
  /** Checks for equality with the object’s `pageName` field. */
  pageName?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `PageTr` object types. All fields are combined with a logical ‘and.’ */
export type PageTrFilter = {
  /** Filter by the object’s `content` field. */
  content?: InputMaybe<StringFilter>;
  /** Filter by the object’s `languageCode` field. */
  languageCode?: InputMaybe<TrLanguageFilter>;
  /** Filter by the object’s `pageName` field. */
  pageName?: InputMaybe<StringFilter>;
};

/** Represents an update to a `PageTr`. Fields that are set will be updated. */
export type PageTrPatch = {
  content?: InputMaybe<Scalars['String']>;
  languageCode?: InputMaybe<TrLanguage>;
  pageName?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `PageTr` values. */
export type PageTrsConnection = {
  __typename?: 'PageTrsConnection';
  /** A list of edges which contains the `PageTr` and cursor to aid in pagination. */
  edges: Array<PageTrsEdge>;
  /** A list of `PageTr` objects. */
  nodes: Array<PageTr>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PageTr` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PageTr` edge in the connection. */
export type PageTrsEdge = {
  __typename?: 'PageTrsEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `PageTr` at the end of the edge. */
  node: PageTr;
};

/** A connection to a list of `Page` values. */
export type PagesConnection = {
  __typename?: 'PagesConnection';
  /** A list of edges which contains the `Page` and cursor to aid in pagination. */
  edges: Array<PagesEdge>;
  /** A list of `Page` objects. */
  nodes: Array<Page>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Page` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Page` edge in the connection. */
export type PagesEdge = {
  __typename?: 'PagesEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `Page` at the end of the edge. */
  node: Page;
};

/** Methods to use when ordering `Page`. */
export enum PagesOrderBy {
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Picture = {
  __typename?: 'Picture';
  allowOnHome: Scalars['Boolean'];
  id: Scalars['BigInt'];
  image: Scalars['BigInt'];
  /** Reads a single `Image` that is related to this `Picture`. */
  imageByImage: Maybe<Image>;
  img: ResponsiveImage;
  rank: Scalars['Int'];
};

/** An input for mutations affecting `Picture` */
export type PictureInput = {
  allowOnHome?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['BigInt']>;
  image: Scalars['BigInt'];
  rank?: InputMaybe<Scalars['Int']>;
};

/** Represents an update to a `Picture`. Fields that are set will be updated. */
export type PicturePatch = {
  allowOnHome?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['BigInt']>;
  image?: InputMaybe<Scalars['BigInt']>;
  rank?: InputMaybe<Scalars['Int']>;
};

/** A connection to a list of `Picture` values. */
export type PicturesConnection = {
  __typename?: 'PicturesConnection';
  /** A list of edges which contains the `Picture` and cursor to aid in pagination. */
  edges: Array<PicturesEdge>;
  /** A list of `Picture` objects. */
  nodes: Array<Picture>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Picture` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Picture` edge in the connection. */
export type PicturesEdge = {
  __typename?: 'PicturesEdge';
  /** A cursor for use in pagination. */
  cursor: Maybe<Scalars['Cursor']>;
  /** The `Picture` at the end of the edge. */
  node: Picture;
};

/** Methods to use when ordering `Picture`. */
export enum PicturesOrderBy {
  AllowOnHomeAsc = 'ALLOW_ON_HOME_ASC',
  AllowOnHomeDesc = 'ALLOW_ON_HOME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ImageAsc = 'IMAGE_ASC',
  ImageDesc = 'IMAGE_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RankAsc = 'RANK_ASC',
  RankDesc = 'RANK_DESC'
}

/** The root query type which gives access points into the data universe. */
export type Query = {
  __typename?: 'Query';
  currentMember: Maybe<Member>;
  event: Maybe<Event>;
  eventBySlug: Maybe<Event>;
  eventTag: Maybe<EventTag>;
  eventTagTr: Maybe<EventTagTr>;
  eventTr: Maybe<EventTr>;
  eventTrBySlugAndLanguageCode: Maybe<EventTr>;
  eventViaEventTag: Maybe<EventViaEventTag>;
  eventViaGroup: Maybe<EventViaGroup>;
  /** Reads and enables pagination through a set of `Event`. */
  events: Maybe<EventsConnection>;
  /** Reads and enables pagination through a set of `Event`. */
  eventsByGroup: Maybe<EventsConnection>;
  group: Maybe<Group>;
  groupBySlug: Maybe<Group>;
  groupTr: Maybe<GroupTr>;
  groupTrBySlugAndLanguageCode: Maybe<GroupTr>;
  /** Reads and enables pagination through a set of `Group`. */
  groups: Maybe<GroupsConnection>;
  image: Maybe<Image>;
  infoPage: Maybe<InfoPage>;
  infoPageTr: Maybe<InfoPageTr>;
  /** Reads and enables pagination through a set of `InfoPage`. */
  infoPages: Maybe<InfoPagesConnection>;
  news: Maybe<News>;
  newsTr: Maybe<NewsTr>;
  /** Reads and enables pagination through a set of `News`. */
  newses: Maybe<NewsConnection>;
  page: Maybe<Page>;
  pageTr: Maybe<PageTr>;
  /** Reads and enables pagination through a set of `Page`. */
  pages: Maybe<PagesConnection>;
  picture: Maybe<Picture>;
  /** Reads and enables pagination through a set of `Picture`. */
  pictures: Maybe<PicturesConnection>;
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  query: Query;
  /** Reads and enables pagination through a set of `Picture`. */
  randomPictures: Maybe<PicturesConnection>;
  /** Reads and enables pagination through a set of `EventTag`. */
  searchEventTags: Maybe<EventTagsConnection>;
  /** Reads and enables pagination through a set of `Event`. */
  searchEventTemplates: Maybe<EventsConnection>;
  /** Reads and enables pagination through a set of `Group`. */
  searchGroups: Maybe<GroupsConnection>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEventArgs = {
  id: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEventBySlugArgs = {
  preferredLanguageCode: Scalars['String'];
  slug: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEventTagArgs = {
  id: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEventTagTrArgs = {
  languageCode: TrLanguage;
  tagId: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEventTrArgs = {
  eventId: Scalars['BigInt'];
  languageCode: TrLanguage;
};


/** The root query type which gives access points into the data universe. */
export type QueryEventTrBySlugAndLanguageCodeArgs = {
  languageCode: TrLanguage;
  slug: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEventViaEventTagArgs = {
  eventId: Scalars['BigInt'];
  tagId: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEventViaGroupArgs = {
  eventId: Scalars['BigInt'];
  groupId: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEventsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<EventCondition>;
  filter?: InputMaybe<EventFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<EventsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEventsByGroupArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  groupId: Scalars['BigInt'];
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGroupArgs = {
  id: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGroupBySlugArgs = {
  preferredLanguageCode: Scalars['String'];
  slug: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGroupTrArgs = {
  groupId: Scalars['BigInt'];
  languageCode: TrLanguage;
};


/** The root query type which gives access points into the data universe. */
export type QueryGroupTrBySlugAndLanguageCodeArgs = {
  languageCode: TrLanguage;
  slug: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGroupsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<GroupCondition>;
  filter?: InputMaybe<GroupFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<GroupsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryImageArgs = {
  id: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryInfoPageArgs = {
  name: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryInfoPageTrArgs = {
  infoPageName: Scalars['String'];
  languageCode: TrLanguage;
};


/** The root query type which gives access points into the data universe. */
export type QueryInfoPagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<InfoPagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNewsArgs = {
  id: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryNewsTrArgs = {
  languageCode: TrLanguage;
  newsId: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryNewsesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<NewsCondition>;
  filter?: InputMaybe<NewsFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<NewsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPageArgs = {
  name: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPageTrArgs = {
  languageCode: TrLanguage;
  pageName: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<PageCondition>;
  filter?: InputMaybe<PageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<PagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPictureArgs = {
  id: Scalars['BigInt'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPicturesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<PicturesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRandomPicturesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySearchEventTagsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySearchEventTemplatesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySearchGroupsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};

/** All input for the `reorderPictures` mutation. */
export type ReorderPicturesInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  reorders: Array<InputMaybe<ReorderPicturesReorderInput>>;
};

/** The output of our `reorderPictures` mutation. */
export type ReorderPicturesPayload = {
  __typename?: 'ReorderPicturesPayload';
  boolean: Maybe<Scalars['Boolean']>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};

/** An input for mutations affecting `ReorderPicturesReorder` */
export type ReorderPicturesReorderInput = {
  fromRank?: InputMaybe<Scalars['Int']>;
  toRank?: InputMaybe<Scalars['Int']>;
};

export type ResponsiveImage = {
  __typename?: 'ResponsiveImage';
  credit: Scalars['String'];
  height: Scalars['Int'];
  src: Scalars['String'];
  srcSetJpeg: Scalars['String'];
  srcSetWebp: Scalars['String'];
  width: Scalars['Int'];
};

/** A filter to be used against String fields. All fields are combined with a logical ‘and.’ */
export type StringFilter = {
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['String']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['String']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['String']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['String']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['String']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['String']>;
};

export enum TrLanguage {
  Da = 'DA',
  En = 'EN'
}

/** A filter to be used against TrLanguage fields. All fields are combined with a logical ‘and.’ */
export type TrLanguageFilter = {
  /** Equal to the specified value. */
  equalTo?: InputMaybe<TrLanguage>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<TrLanguage>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<TrLanguage>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<TrLanguage>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<TrLanguage>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<TrLanguage>;
};

/** All input for the `updateImage` mutation. */
export type UpdateImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['BigInt'];
  /** An object where the defined keys will be set on the `Image` being updated. */
  patch: ImagePatch;
};

/** The output of our update `Image` mutation. */
export type UpdateImagePayload = {
  __typename?: 'UpdateImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** The `Image` that was updated by this mutation. */
  image: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};

/** All input for the `updateNews` mutation. */
export type UpdateNewsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['BigInt'];
  /** An object where the defined keys will be set on the `News` being updated. */
  patch: NewsPatch;
};

/** The output of our update `News` mutation. */
export type UpdateNewsPayload = {
  __typename?: 'UpdateNewsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** The `News` that was updated by this mutation. */
  news: Maybe<News>;
  /** An edge for our `News`. May be used by Relay 1. */
  newsEdge: Maybe<NewsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our update `News` mutation. */
export type UpdateNewsPayloadNewsEdgeArgs = {
  orderBy?: InputMaybe<Array<NewsOrderBy>>;
};

/** All input for the `updatePage` mutation. */
export type UpdatePageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  /** An object where the defined keys will be set on the `Page` being updated. */
  patch: PagePatch;
};

/** The output of our update `Page` mutation. */
export type UpdatePagePayload = {
  __typename?: 'UpdatePagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** The `Page` that was updated by this mutation. */
  page: Maybe<Page>;
  /** An edge for our `Page`. May be used by Relay 1. */
  pageEdge: Maybe<PagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our update `Page` mutation. */
export type UpdatePagePayloadPageEdgeArgs = {
  orderBy?: InputMaybe<Array<PagesOrderBy>>;
};

/** All input for the `updatePageTr` mutation. */
export type UpdatePageTrInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  languageCode: TrLanguage;
  pageName: Scalars['String'];
  /** An object where the defined keys will be set on the `PageTr` being updated. */
  patch: PageTrPatch;
};

/** The output of our update `PageTr` mutation. */
export type UpdatePageTrPayload = {
  __typename?: 'UpdatePageTrPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** Reads a single `Page` that is related to this `PageTr`. */
  pageByPageName: Maybe<Page>;
  /** The `PageTr` that was updated by this mutation. */
  pageTr: Maybe<PageTr>;
  /** An edge for our `PageTr`. May be used by Relay 1. */
  pageTrEdge: Maybe<PageTrsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};

/** All input for the `updatePicture` mutation. */
export type UpdatePictureInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['BigInt'];
  /** An object where the defined keys will be set on the `Picture` being updated. */
  patch: PicturePatch;
};

/** The output of our update `Picture` mutation. */
export type UpdatePicturePayload = {
  __typename?: 'UpdatePicturePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `Picture`. */
  imageByImage: Maybe<Image>;
  /** The `Picture` that was updated by this mutation. */
  picture: Maybe<Picture>;
  /** An edge for our `Picture`. May be used by Relay 1. */
  pictureEdge: Maybe<PicturesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our update `Picture` mutation. */
export type UpdatePicturePayloadPictureEdgeArgs = {
  orderBy?: InputMaybe<Array<PicturesOrderBy>>;
};

/** All input for the `upsertEvent` mutation. */
export type UpsertEventInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  data: EventDatumInput;
  eventId?: InputMaybe<Scalars['BigInt']>;
  translations: Array<InputMaybe<EventTrDatumInput>>;
};

/** The output of our `upsertEvent` mutation. */
export type UpsertEventPayload = {
  __typename?: 'UpsertEventPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  event: Maybe<Event>;
  /** An edge for our `Event`. May be used by Relay 1. */
  eventEdge: Maybe<EventsEdge>;
  /** Reads a single `Image` that is related to this `Event`. */
  imageByOverrideImage: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our `upsertEvent` mutation. */
export type UpsertEventPayloadEventEdgeArgs = {
  orderBy?: InputMaybe<Array<EventsOrderBy>>;
};

/** All input for the `upsertGroup` mutation. */
export type UpsertGroupInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  data: GroupDatumInput;
  groupId?: InputMaybe<Scalars['BigInt']>;
  translations: Array<InputMaybe<GroupTrDatumInput>>;
};

/** The output of our `upsertGroup` mutation. */
export type UpsertGroupPayload = {
  __typename?: 'UpsertGroupPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  group: Maybe<Group>;
  /** An edge for our `Group`. May be used by Relay 1. */
  groupEdge: Maybe<GroupsEdge>;
  /** Reads a single `Image` that is related to this `Group`. */
  imageByImage: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our `upsertGroup` mutation. */
export type UpsertGroupPayloadGroupEdgeArgs = {
  orderBy?: InputMaybe<Array<GroupsOrderBy>>;
};

/** All input for the `upsertInfoPage` mutation. */
export type UpsertInfoPageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  data: InfoPageDatumInput;
  infoPageName: Scalars['String'];
  translations: Array<InputMaybe<InfoPageTrDatumInput>>;
};

/** The output of our `upsertInfoPage` mutation. */
export type UpsertInfoPagePayload = {
  __typename?: 'UpsertInfoPagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId: Maybe<Scalars['String']>;
  infoPage: Maybe<InfoPage>;
  /** An edge for our `InfoPage`. May be used by Relay 1. */
  infoPageEdge: Maybe<InfoPagesEdge>;
  /** Reads a single `Page` that is related to this `InfoPage`. */
  pageByName: Maybe<Page>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query: Maybe<Query>;
};


/** The output of our `upsertInfoPage` mutation. */
export type UpsertInfoPagePayloadInfoPageEdgeArgs = {
  orderBy?: InputMaybe<Array<InfoPagesOrderBy>>;
};

export type AuthenticateMutationVariables = Exact<{
  username: Scalars['String'];
  password: Scalars['String'];
}>;


export type AuthenticateMutation = { __typename?: 'Mutation', authenticate: string };

export type LogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type LogoutMutation = { __typename?: 'Mutation', logout: boolean | null | undefined };

export type GetMeQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMeQuery = { __typename?: 'Query', currentMember: { __typename?: 'Member', name: string, id: any, userRole: string } | null | undefined };

export type SearchGroupsQueryVariables = Exact<{
  query: Scalars['String'];
}>;


export type SearchGroupsQuery = { __typename?: 'Query', searchGroups: { __typename?: 'GroupsConnection', nodes: Array<{ __typename?: 'Group', id: any, translations: { __typename?: 'GroupTrsConnection', nodes: Array<{ __typename?: 'GroupTr', title: string, groupId: any, languageCode: TrLanguage }> } }> } | null | undefined };

export type SearchEventTagsQueryVariables = Exact<{
  query: Scalars['String'];
}>;


export type SearchEventTagsQuery = { __typename?: 'Query', searchEventTags: { __typename?: 'EventTagsConnection', nodes: Array<{ __typename?: 'EventTag', id: any, translations: { __typename?: 'EventTagTrsConnection', nodes: Array<{ __typename?: 'EventTagTr', languageCode: TrLanguage, title: string, tagId: any }> } }> } | null | undefined };

export type SearchEventTemplatesQueryVariables = Exact<{
  query: Scalars['String'];
}>;


export type SearchEventTemplatesQuery = { __typename?: 'Query', searchEventTemplates: { __typename?: 'EventsConnection', nodes: Array<{ __typename?: 'Event', id: any, templateName: string | null | undefined, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', languageCode: TrLanguage, title: string, eventId: any }> } }> } | null | undefined };

export type GroupByIdQueryVariables = Exact<{
  id: Scalars['BigInt'];
}>;


export type GroupByIdQuery = { __typename?: 'Query', group: { __typename?: 'Group', id: any, translations: { __typename?: 'GroupTrsConnection', nodes: Array<{ __typename?: 'GroupTr', languageCode: TrLanguage, title: string, groupId: any }> } } | null | undefined };

export type EventTagByIdQueryVariables = Exact<{
  id: Scalars['BigInt'];
}>;


export type EventTagByIdQuery = { __typename?: 'Query', eventTag: { __typename?: 'EventTag', id: any, translations: { __typename?: 'EventTagTrsConnection', nodes: Array<{ __typename?: 'EventTagTr', languageCode: TrLanguage, title: string, tagId: any }> } } | null | undefined };

export type CalendarEventsQueryQueryVariables = Exact<{
  startsAfter?: InputMaybe<Scalars['Datetime']>;
  startsBefore?: InputMaybe<Scalars['Datetime']>;
}>;


export type CalendarEventsQueryQuery = { __typename?: 'Query', events: { __typename?: 'EventsConnection', nodes: Array<{ __typename?: 'Event', endsAt: string, id: any, startsAt: string, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', slug: string, title: string, languageCode: TrLanguage, eventId: any }> } }> } | null | undefined };

export type CalendarEventFragment = { __typename?: 'Event', endsAt: string, id: any, startsAt: string, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', slug: string, title: string, languageCode: TrLanguage, eventId: any }> } };

export type DetailedEventFragment = { __typename?: 'Event', startsAt: string, endsAt: string, id: any, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', description: string, eventId: any, languageCode: TrLanguage, slug: string, title: string }> }, img: { __typename?: 'ResponsiveImage', src: string, srcSetJpeg: string, srcSetWebp: string, height: number, width: number } | null | undefined, tags: { __typename?: 'EventViaEventTagsConnection', nodes: Array<{ __typename?: 'EventViaEventTag', eventId: any, tagId: any, tag: { __typename?: 'EventTag', id: any, translations: { __typename?: 'EventTagTrsConnection', nodes: Array<{ __typename?: 'EventTagTr', languageCode: TrLanguage, tagId: any, title: string }> } } | null | undefined }> }, groups: { __typename?: 'EventViaGroupsConnection', nodes: Array<{ __typename?: 'EventViaGroup', eventId: any, groupId: any, group: { __typename?: 'Group', id: any, translations: { __typename?: 'GroupTrsConnection', nodes: Array<{ __typename?: 'GroupTr', groupId: any, languageCode: TrLanguage, title: string }> } } | null | undefined }> } };

export type CalendarEventBySlugQueryVariables = Exact<{
  languageCode: Scalars['String'];
  slug: Scalars['String'];
}>;


export type CalendarEventBySlugQuery = { __typename?: 'Query', eventBySlug: { __typename?: 'Event', startsAt: string, endsAt: string, id: any, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', description: string, eventId: any, languageCode: TrLanguage, slug: string, title: string }> }, img: { __typename?: 'ResponsiveImage', src: string, srcSetJpeg: string, srcSetWebp: string, height: number, width: number } | null | undefined, tags: { __typename?: 'EventViaEventTagsConnection', nodes: Array<{ __typename?: 'EventViaEventTag', eventId: any, tagId: any, tag: { __typename?: 'EventTag', id: any, translations: { __typename?: 'EventTagTrsConnection', nodes: Array<{ __typename?: 'EventTagTr', languageCode: TrLanguage, tagId: any, title: string }> } } | null | undefined }> }, groups: { __typename?: 'EventViaGroupsConnection', nodes: Array<{ __typename?: 'EventViaGroup', eventId: any, groupId: any, group: { __typename?: 'Group', id: any, translations: { __typename?: 'GroupTrsConnection', nodes: Array<{ __typename?: 'GroupTr', groupId: any, languageCode: TrLanguage, title: string }> } } | null | undefined }> } } | null | undefined };

export type CalendarEventByIdQueryVariables = Exact<{
  id: Scalars['BigInt'];
}>;


export type CalendarEventByIdQuery = { __typename?: 'Query', event: { __typename?: 'Event', startsAt: string, endsAt: string, id: any, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', description: string, eventId: any, languageCode: TrLanguage, slug: string, title: string }> }, img: { __typename?: 'ResponsiveImage', src: string, srcSetJpeg: string, srcSetWebp: string, height: number, width: number } | null | undefined, tags: { __typename?: 'EventViaEventTagsConnection', nodes: Array<{ __typename?: 'EventViaEventTag', eventId: any, tagId: any, tag: { __typename?: 'EventTag', id: any, translations: { __typename?: 'EventTagTrsConnection', nodes: Array<{ __typename?: 'EventTagTr', languageCode: TrLanguage, tagId: any, title: string }> } } | null | undefined }> }, groups: { __typename?: 'EventViaGroupsConnection', nodes: Array<{ __typename?: 'EventViaGroup', eventId: any, groupId: any, group: { __typename?: 'Group', id: any, translations: { __typename?: 'GroupTrsConnection', nodes: Array<{ __typename?: 'GroupTr', groupId: any, languageCode: TrLanguage, title: string }> } } | null | undefined }> } } | null | undefined };

export type UpsertEventMutationVariables = Exact<{
  data: EventDatumInput;
  translations: Array<InputMaybe<EventTrDatumInput>> | InputMaybe<EventTrDatumInput>;
  id?: InputMaybe<Scalars['BigInt']>;
}>;


export type UpsertEventMutation = { __typename?: 'Mutation', upsertEvent: { __typename?: 'UpsertEventPayload', event: { __typename?: 'Event', endsAt: string, id: any, startsAt: string, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', slug: string, title: string, languageCode: TrLanguage, eventId: any }> } } | null | undefined } | null | undefined };

export type GetUploadUrlMutationVariables = Exact<{
  contentType: Scalars['String'];
  randomId?: InputMaybe<Scalars['String']>;
}>;


export type GetUploadUrlMutation = { __typename?: 'Mutation', createUploadUrl: { __typename?: 'CreateUploadUrlPayload', uploadUrl: string, formData: string } | null | undefined };

export type GroupQueryQueryVariables = Exact<{
  slug: Scalars['String'];
  preferredLanguageCode: Scalars['String'];
}>;


export type GroupQueryQuery = { __typename?: 'Query', groupBySlug: { __typename?: 'Group', id: any, image: any | null | undefined, isOpen: boolean, translations: { __typename?: 'GroupTrsConnection', nodes: Array<{ __typename?: 'GroupTr', activity: string, description: string, languageCode: TrLanguage, shortDescription: string, slug: string, title: string, groupId: any }> }, img: { __typename?: 'ResponsiveImage', height: number, src: string, srcSetJpeg: string, srcSetWebp: string, width: number } } | null | undefined };

export type UpsertGroupMutationVariables = Exact<{
  data: GroupDatumInput;
  translations: Array<InputMaybe<GroupTrDatumInput>> | InputMaybe<GroupTrDatumInput>;
  id?: InputMaybe<Scalars['BigInt']>;
}>;


export type UpsertGroupMutation = { __typename?: 'Mutation', upsertGroup: { __typename?: 'UpsertGroupPayload', group: { __typename?: 'Group', id: any, image: any | null | undefined, isOpen: boolean, translations: { __typename?: 'GroupTrsConnection', nodes: Array<{ __typename?: 'GroupTr', activity: string, description: string, languageCode: TrLanguage, shortDescription: string, slug: string, title: string, groupId: any }> }, img: { __typename?: 'ResponsiveImage', height: number, src: string, srcSetJpeg: string, srcSetWebp: string, width: number } } | null | undefined } | null | undefined };

export type GroupEventsQueryVariables = Exact<{
  groupId: Scalars['BigInt'];
}>;


export type GroupEventsQuery = { __typename?: 'Query', eventsByGroup: { __typename?: 'EventsConnection', nodes: Array<{ __typename?: 'Event', endsAt: string, id: any, startsAt: string, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', slug: string, title: string, languageCode: TrLanguage, eventId: any }> } }> } | null | undefined };

export type HomeEventsQueryQueryVariables = Exact<{
  startsAfter?: InputMaybe<Scalars['Datetime']>;
}>;


export type HomeEventsQueryQuery = { __typename?: 'Query', specialEvents: { __typename?: 'EventsConnection', nodes: Array<{ __typename?: 'Event', endsAt: string, id: any, startsAt: string, special: boolean, img: { __typename?: 'ResponsiveImage', src: string, srcSetJpeg: string, srcSetWebp: string, height: number, width: number } | null | undefined, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', slug: string, title: string, languageCode: TrLanguage, description: string, eventId: any }> } }> } | null | undefined, events: { __typename?: 'EventsConnection', nodes: Array<{ __typename?: 'Event', endsAt: string, id: any, startsAt: string, special: boolean, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', slug: string, title: string, languageCode: TrLanguage, description: string, eventId: any }> } }> } | null | undefined };

export type HomeEventFragment = { __typename?: 'Event', endsAt: string, id: any, startsAt: string, special: boolean, translations: { __typename?: 'EventTrsConnection', nodes: Array<{ __typename?: 'EventTr', slug: string, title: string, languageCode: TrLanguage, description: string, eventId: any }> } };

export type HomeGroupsQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type HomeGroupsQueryQuery = { __typename?: 'Query', groups: { __typename?: 'GroupsConnection', nodes: Array<{ __typename?: 'Group', id: any, isOpen: boolean, img: { __typename?: 'ResponsiveImage', src: string, srcSetJpeg: string, srcSetWebp: string, height: number, width: number }, translations: { __typename?: 'GroupTrsConnection', nodes: Array<{ __typename?: 'GroupTr', languageCode: TrLanguage, title: string, shortDescription: string, slug: string, groupId: any, activity: string }> } }> } | null | undefined };

export type HomeRandomPicturesQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type HomeRandomPicturesQueryQuery = { __typename?: 'Query', randomPictures: { __typename?: 'PicturesConnection', nodes: Array<{ __typename?: 'Picture', image: any, id: any, rank: number, img: { __typename?: 'ResponsiveImage', height: number, src: string, srcSetJpeg: string, srcSetWebp: string, width: number } }> } | null | undefined };

export type HomeNewsQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type HomeNewsQueryQuery = { __typename?: 'Query', newses: { __typename?: 'NewsConnection', nodes: Array<{ __typename?: 'News', publishedAt: string, id: any, updatedAt: string, translations: { __typename?: 'NewsTrsConnection', nodes: Array<{ __typename?: 'NewsTr', content: string, title: string, languageCode: TrLanguage, newsId: any }> } }> } | null | undefined };

export type PageQueryQueryVariables = Exact<{
  name: Scalars['String'];
}>;


export type PageQueryQuery = { __typename?: 'Query', page: { __typename?: 'Page', name: string, translations: { __typename?: 'PageTrsConnection', nodes: Array<{ __typename?: 'PageTr', content: string, languageCode: TrLanguage, pageName: string }> } } | null | undefined };

export type UpdatePageTranslationMutationVariables = Exact<{
  content: Scalars['String'];
  pageName: Scalars['String'];
  languageCode: TrLanguage;
}>;


export type UpdatePageTranslationMutation = { __typename?: 'Mutation', updatePageTr: { __typename?: 'UpdatePageTrPayload', pageTr: { __typename?: 'PageTr', content: string, languageCode: TrLanguage, pageName: string } | null | undefined } | null | undefined };

export type PageTranslationFragment = { __typename?: 'PageTr', content: string, languageCode: TrLanguage, pageName: string };

export type InfoPagesQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type InfoPagesQueryQuery = { __typename?: 'Query', infoPages: { __typename?: 'InfoPagesConnection', nodes: Array<{ __typename?: 'InfoPage', icon: string, name: string, rank: number, translations: { __typename?: 'InfoPageTrsConnection', nodes: Array<{ __typename?: 'InfoPageTr', languageCode: TrLanguage, infoPageName: string, subtitle: string, title: string }> } }> } | null | undefined };

export type InfoPageQueryQueryVariables = Exact<{
  name: Scalars['String'];
}>;


export type InfoPageQueryQuery = { __typename?: 'Query', infoPage: { __typename?: 'InfoPage', icon: string, rank: number, name: string, translations: { __typename?: 'InfoPageTrsConnection', nodes: Array<{ __typename?: 'InfoPageTr', languageCode: TrLanguage, infoPageName: string, subtitle: string, title: string }> } } | null | undefined };

export type UpsertInfoPageMutationVariables = Exact<{
  data: InfoPageDatumInput;
  translations: Array<InputMaybe<InfoPageTrDatumInput>> | InputMaybe<InfoPageTrDatumInput>;
  name: Scalars['String'];
}>;


export type UpsertInfoPageMutation = { __typename?: 'Mutation', upsertInfoPage: { __typename?: 'UpsertInfoPagePayload', infoPage: { __typename?: 'InfoPage', icon: string, rank: number, name: string, translations: { __typename?: 'InfoPageTrsConnection', nodes: Array<{ __typename?: 'InfoPageTr', languageCode: TrLanguage, infoPageName: string, subtitle: string, title: string }> } } | null | undefined } | null | undefined };

export type PicturesQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type PicturesQueryQuery = { __typename?: 'Query', pictures: { __typename?: 'PicturesConnection', nodes: Array<{ __typename?: 'Picture', id: any, rank: number, allowOnHome: boolean, img: { __typename?: 'ResponsiveImage', height: number, src: string, srcSetJpeg: string, srcSetWebp: string, width: number, credit: string } }> } | null | undefined };

export type CreateImageMutationMutationVariables = Exact<{
  path: Scalars['String'];
  height: Scalars['Int'];
  width: Scalars['Int'];
  onlyId?: InputMaybe<Scalars['Boolean']>;
}>;


export type CreateImageMutationMutation = { __typename?: 'Mutation', createImage: { __typename?: 'CreateImagePayload', image: { __typename?: 'Image', id: any, img?: { __typename?: 'ResponsiveImage', height: number, src: string, srcSetJpeg: string, srcSetWebp: string, width: number, credit: string } } | null | undefined } | null | undefined };

export type ImageQueryQueryVariables = Exact<{
  id: Scalars['BigInt'];
}>;


export type ImageQueryQuery = { __typename?: 'Query', image: { __typename?: 'Image', id: any, img: { __typename?: 'ResponsiveImage', height: number, src: string, srcSetJpeg: string, width: number, srcSetWebp: string, credit: string } } | null | undefined };

export type CreatePictureMutationVariables = Exact<{
  image: Scalars['BigInt'];
}>;


export type CreatePictureMutation = { __typename?: 'Mutation', createPicture: { __typename?: 'CreatePicturePayload', picture: { __typename?: 'Picture', id: any, rank: number, allowOnHome: boolean, img: { __typename?: 'ResponsiveImage', height: number, src: string, srcSetJpeg: string, srcSetWebp: string, width: number, credit: string } } | null | undefined } | null | undefined };

export type ReorderPicturesMutationMutationVariables = Exact<{
  reorders: Array<InputMaybe<ReorderPicturesReorderInput>> | InputMaybe<ReorderPicturesReorderInput>;
}>;


export type ReorderPicturesMutationMutation = { __typename?: 'Mutation', reorderPictures: { __typename?: 'ReorderPicturesPayload', boolean: boolean | null | undefined } | null | undefined };

export type SetPictureAllowOnHomeMutationMutationVariables = Exact<{
  id: Scalars['BigInt'];
  input: Scalars['Boolean'];
}>;


export type SetPictureAllowOnHomeMutationMutation = { __typename?: 'Mutation', updatePicture: { __typename?: 'UpdatePicturePayload', picture: { __typename?: 'Picture', image: any, id: any, rank: number, allowOnHome: boolean, img: { __typename?: 'ResponsiveImage', height: number, src: string, srcSetJpeg: string, srcSetWebp: string, width: number, credit: string } } | null | undefined } | null | undefined };

export type DeletePictureMutationMutationVariables = Exact<{
  id: Scalars['BigInt'];
}>;


export type DeletePictureMutationMutation = { __typename?: 'Mutation', deletePicture: { __typename?: 'DeletePicturePayload', picture: { __typename?: 'Picture', image: any, id: any, rank: number, allowOnHome: boolean, img: { __typename?: 'ResponsiveImage', height: number, src: string, srcSetJpeg: string, srcSetWebp: string, width: number, credit: string } } | null | undefined } | null | undefined };

export const CalendarEventFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CalendarEvent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Event"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"eventId"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"endsAt"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"startsAt"}}]}}]} as unknown as DocumentNode<CalendarEventFragment, unknown>;
export const DetailedEventFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DetailedEvent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Event"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"eventId"}},{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"startsAt"}},{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"endsAt"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"tags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tag"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"tagId"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"eventId"}},{"kind":"Field","name":{"kind":"Name","value":"tagId"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"groups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"group"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"eventId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]}}]}}]} as unknown as DocumentNode<DetailedEventFragment, unknown>;
export const HomeEventFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"HomeEvent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Event"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"eventId"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"endsAt"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"startsAt"}},{"kind":"Field","name":{"kind":"Name","value":"special"}}]}}]} as unknown as DocumentNode<HomeEventFragment, unknown>;
export const PageTranslationFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"PageTranslation"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"PageTr"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"pageName"}}]}}]} as unknown as DocumentNode<PageTranslationFragment, unknown>;
export const AuthenticateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"Authenticate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"username"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"password"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"authenticate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"username"},"value":{"kind":"Variable","name":{"kind":"Name","value":"username"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"password"},"value":{"kind":"Variable","name":{"kind":"Name","value":"password"}}}]}}]}]}}]} as unknown as DocumentNode<AuthenticateMutation, AuthenticateMutationVariables>;
export const LogoutDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"Logout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"logout"}}]}}]} as unknown as DocumentNode<LogoutMutation, LogoutMutationVariables>;
export const GetMeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMe"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"currentMember"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"}}]}}]}}]} as unknown as DocumentNode<GetMeQuery, GetMeQueryVariables>;
export const SearchGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SearchGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"searchGroups"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"languageCode"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<SearchGroupsQuery, SearchGroupsQueryVariables>;
export const SearchEventTagsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SearchEventTags"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"searchEventTags"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"tagId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<SearchEventTagsQuery, SearchEventTagsQueryVariables>;
export const SearchEventTemplatesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SearchEventTemplates"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"searchEventTemplates"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"templateName"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"eventId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<SearchEventTemplatesQuery, SearchEventTemplatesQueryVariables>;
export const GroupByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GroupById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"group"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GroupByIdQuery, GroupByIdQueryVariables>;
export const EventTagByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"EventTagById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"eventTag"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"tagId"}}]}}]}}]}}]}}]} as unknown as DocumentNode<EventTagByIdQuery, EventTagByIdQueryVariables>;
export const CalendarEventsQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CalendarEventsQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startsAfter"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Datetime"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startsBefore"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Datetime"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"events"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startsAt"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"greaterThan"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startsAfter"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lessThan"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startsBefore"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"templateName"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"isNull"},"value":{"kind":"BooleanValue","value":true}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"EnumValue","value":"STARTS_AT_ASC"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CalendarEvent"}}]}}]}}]}},...CalendarEventFragmentDoc.definitions]} as unknown as DocumentNode<CalendarEventsQueryQuery, CalendarEventsQueryQueryVariables>;
export const CalendarEventBySlugDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CalendarEventBySlug"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"languageCode"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"eventBySlug"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"preferredLanguageCode"},"value":{"kind":"Variable","name":{"kind":"Name","value":"languageCode"}}},{"kind":"Argument","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"DetailedEvent"}}]}}]}},...DetailedEventFragmentDoc.definitions]} as unknown as DocumentNode<CalendarEventBySlugQuery, CalendarEventBySlugQueryVariables>;
export const CalendarEventByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CalendarEventById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"event"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"DetailedEvent"}}]}}]}},...DetailedEventFragmentDoc.definitions]} as unknown as DocumentNode<CalendarEventByIdQuery, CalendarEventByIdQueryVariables>;
export const UpsertEventDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpsertEvent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"EventDatumInput"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"translations"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"EventTrDatumInput"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"upsertEvent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"data"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"translations"},"value":{"kind":"Variable","name":{"kind":"Name","value":"translations"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"eventId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"event"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CalendarEvent"}}]}}]}}]}},...CalendarEventFragmentDoc.definitions]} as unknown as DocumentNode<UpsertEventMutation, UpsertEventMutationVariables>;
export const GetUploadUrlDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"GetUploadUrl"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"contentType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"randomId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createUploadUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contentType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"contentType"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"clientMutationId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"randomId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"uploadUrl"}},{"kind":"Field","name":{"kind":"Name","value":"formData"}}]}}]}}]} as unknown as DocumentNode<GetUploadUrlMutation, GetUploadUrlMutationVariables>;
export const GroupQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GroupQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"preferredLanguageCode"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupBySlug"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"preferredLanguageCode"},"value":{"kind":"Variable","name":{"kind":"Name","value":"preferredLanguageCode"}}},{"kind":"Argument","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"image"}},{"kind":"Field","name":{"kind":"Name","value":"isOpen"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activity"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"shortDescription"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}}]}}]}}]} as unknown as DocumentNode<GroupQueryQuery, GroupQueryQueryVariables>;
export const UpsertGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpsertGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"GroupDatumInput"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"translations"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"GroupTrDatumInput"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"upsertGroup"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"data"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"translations"},"value":{"kind":"Variable","name":{"kind":"Name","value":"translations"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"group"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"image"}},{"kind":"Field","name":{"kind":"Name","value":"isOpen"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activity"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"shortDescription"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}}]}}]}}]}}]} as unknown as DocumentNode<UpsertGroupMutation, UpsertGroupMutationVariables>;
export const GroupEventsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GroupEvents"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"eventsByGroup"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CalendarEvent"}}]}}]}}]}},...CalendarEventFragmentDoc.definitions]} as unknown as DocumentNode<GroupEventsQuery, GroupEventsQueryVariables>;
export const HomeEventsQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"HomeEventsQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startsAfter"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Datetime"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"specialEvents"},"name":{"kind":"Name","value":"events"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"special"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equalTo"},"value":{"kind":"BooleanValue","value":true}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"startsAt"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"greaterThan"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startsAfter"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"templateName"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"isNull"},"value":{"kind":"BooleanValue","value":true}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"1"}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"EnumValue","value":"STARTS_AT_ASC"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"HomeEvent"}},{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"events"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startsAt"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"greaterThan"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startsAfter"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"templateName"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"isNull"},"value":{"kind":"BooleanValue","value":true}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"EnumValue","value":"STARTS_AT_ASC"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"HomeEvent"}}]}}]}}]}},...HomeEventFragmentDoc.definitions]} as unknown as DocumentNode<HomeEventsQueryQuery, HomeEventsQueryQueryVariables>;
export const HomeGroupsQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"HomeGroupsQuery"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"isOpen"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortDescription"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"activity"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<HomeGroupsQueryQuery, HomeGroupsQueryQueryVariables>;
export const HomeRandomPicturesQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"HomeRandomPicturesQuery"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"randomPictures"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"4"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"image"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"rank"}},{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}}]}}]}}]}}]} as unknown as DocumentNode<HomeRandomPicturesQueryQuery, HomeRandomPicturesQueryQueryVariables>;
export const HomeNewsQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"HomeNewsQuery"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"newses"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"1"}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"EnumValue","value":"PUBLISHED_AT_DESC"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"publishedAt"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"newsId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<HomeNewsQueryQuery, HomeNewsQueryQueryVariables>;
export const PageQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"PageQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"page"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"PageTranslation"}}]}}]}}]}}]}},...PageTranslationFragmentDoc.definitions]} as unknown as DocumentNode<PageQueryQuery, PageQueryQueryVariables>;
export const UpdatePageTranslationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdatePageTranslation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"content"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pageName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"languageCode"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"TrLanguage"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePageTr"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"patch"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"content"},"value":{"kind":"Variable","name":{"kind":"Name","value":"content"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"pageName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pageName"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"languageCode"},"value":{"kind":"Variable","name":{"kind":"Name","value":"languageCode"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pageTr"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"PageTranslation"}}]}}]}}]}},...PageTranslationFragmentDoc.definitions]} as unknown as DocumentNode<UpdatePageTranslationMutation, UpdatePageTranslationMutationVariables>;
export const InfoPagesQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"InfoPagesQuery"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"infoPages"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"EnumValue","value":"RANK_ASC"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"icon"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"rank"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"infoPageName"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<InfoPagesQueryQuery, InfoPagesQueryQueryVariables>;
export const InfoPageQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"InfoPageQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"infoPage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"icon"}},{"kind":"Field","name":{"kind":"Name","value":"rank"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"infoPageName"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]}}]} as unknown as DocumentNode<InfoPageQueryQuery, InfoPageQueryQueryVariables>;
export const UpsertInfoPageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpsertInfoPage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"InfoPageDatumInput"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"translations"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"InfoPageTrDatumInput"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"upsertInfoPage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"data"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"translations"},"value":{"kind":"Variable","name":{"kind":"Name","value":"translations"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"infoPageName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"infoPage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"icon"}},{"kind":"Field","name":{"kind":"Name","value":"rank"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"translations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"languageCode"}},{"kind":"Field","name":{"kind":"Name","value":"infoPageName"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<UpsertInfoPageMutation, UpsertInfoPageMutationVariables>;
export const PicturesQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"PicturesQuery"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pictures"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"EnumValue","value":"RANK_ASC"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"credit"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"rank"}},{"kind":"Field","name":{"kind":"Name","value":"allowOnHome"}}]}}]}}]}}]} as unknown as DocumentNode<PicturesQueryQuery, PicturesQueryQueryVariables>;
export const CreateImageMutationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateImageMutation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"path"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"height"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"width"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"onlyId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":true}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createImage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"image"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"path"},"value":{"kind":"Variable","name":{"kind":"Name","value":"path"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"width"},"value":{"kind":"Variable","name":{"kind":"Name","value":"width"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"height"},"value":{"kind":"Variable","name":{"kind":"Name","value":"height"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"credit"},"value":{"kind":"StringValue","value":"","block":false}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"img"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"skip"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"onlyId"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"credit"}}]}}]}}]}}]}}]} as unknown as DocumentNode<CreateImageMutationMutation, CreateImageMutationMutationVariables>;
export const ImageQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ImageQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"image"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"credit"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<ImageQueryQuery, ImageQueryQueryVariables>;
export const CreatePictureDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreatePicture"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"image"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPicture"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"picture"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"image"},"value":{"kind":"Variable","name":{"kind":"Name","value":"image"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"picture"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"credit"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"rank"}},{"kind":"Field","name":{"kind":"Name","value":"allowOnHome"}}]}}]}}]}}]} as unknown as DocumentNode<CreatePictureMutation, CreatePictureMutationVariables>;
export const ReorderPicturesMutationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ReorderPicturesMutation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"reorders"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ReorderPicturesReorderInput"}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"reorderPictures"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"reorders"},"value":{"kind":"Variable","name":{"kind":"Name","value":"reorders"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"boolean"}}]}}]}}]} as unknown as DocumentNode<ReorderPicturesMutationMutation, ReorderPicturesMutationMutationVariables>;
export const SetPictureAllowOnHomeMutationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SetPictureAllowOnHomeMutation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePicture"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"patch"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"allowOnHome"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"picture"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"image"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"rank"}},{"kind":"Field","name":{"kind":"Name","value":"allowOnHome"}},{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"credit"}}]}}]}}]}}]}}]} as unknown as DocumentNode<SetPictureAllowOnHomeMutationMutation, SetPictureAllowOnHomeMutationMutationVariables>;
export const DeletePictureMutationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeletePictureMutation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"BigInt"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deletePicture"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"picture"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"image"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"rank"}},{"kind":"Field","name":{"kind":"Name","value":"allowOnHome"}},{"kind":"Field","name":{"kind":"Name","value":"img"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"src"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetJpeg"}},{"kind":"Field","name":{"kind":"Name","value":"srcSetWebp"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"credit"}}]}}]}}]}}]}}]} as unknown as DocumentNode<DeletePictureMutationMutation, DeletePictureMutationMutationVariables>;