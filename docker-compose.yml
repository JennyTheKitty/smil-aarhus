version: '3.9'
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # USER_UID: $UID
        SETUP_MODE: normal

    # On Linux, this will prevent new files getting created as root, but you
    # may need to update the USER_UID and USER_GID in `Dockerfile` to match
    # your user if not 1000.
    # user: $UID

    env_file:
      - docker/.env
    volumes:
      - .:/work
      # let's us run docker & docker-compose from inside container (used for yarn setup)
      - $XDG_RUNTIME_DIR/docker.sock:/var/run/docker.sock
      - nm_root:/work/node_modules
      - nm_app_admin:/work/@app/admin/node_modules
      - nm_app_client:/work/@app/client/node_modules
      - nm_app_config:/work/@app/config/node_modules
      - nm_app_db:/work/@app/db/node_modules
      - nm_app_graphql:/work/@app/graphql/node_modules
      - nm_app_server:/work/@app/server/node_modules
    working_dir: /work
    networks:
      - default
    ports:
      # The main server
      - '5678:5678'
      # Vite HMR
      - '12345:12345'
      # Node `--inspect=...` port numbers for debugging
      - '9678:9678'
      - '9876:9876'
      - '9757:9757'
    depends_on:
      - db
      - minio
      - traefik
    #* Overrides default command so things don't shut down after the process ends.
    command: yarn start

  # extends server, is made for live developing
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # USER_UID: $UID
        SETUP_MODE: dev

    env_file:
      - docker/.env

    # On Linux, this will prevent new files getting created as root, but you
    # may need to update the USER_UID and USER_GID in `Dockerfile` to match
    # your user if not 1000.
    # user: $UID

    volumes:
      #* same as service: server
      - .:/work

      # let's us run docker & docker-compose from inside container (used for yarn setup)
      - $XDG_RUNTIME_DIR/docker.sock:/var/run/docker.sock
      - nm_root:/work/node_modules
      - nm_app_admin:/work/@app/admin/node_modules
      - nm_app_client:/work/@app/client/node_modules
      - nm_app_config:/work/@app/config/node_modules
      - nm_app_db:/work/@app/db/node_modules
      - nm_app_graphql:/work/@app/graphql/node_modules
      - nm_app_server:/work/@app/server/node_modules

    working_dir: /work
    networks:
      - default
    ports:
      # # The main server
      # - "5678:5678"
      # Vite HMR
      # - "12345:12345"
      # Node `--inspect=...` port numbers for debugging
      - '9678:9678'
      - '9876:9876'
      - '9757:9757'
    depends_on:
      - db
      - minio
      - traefik
      - imgproxy
    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity
    labels:
      - 'traefik.enable=true'

      - 'traefik.http.routers.dev.rule=Host(`${DOMAIN}`)'
      - 'traefik.http.routers.dev.entrypoints=web'
      - 'traefik.http.routers.dev.service=dev'
      - 'traefik.http.services.dev.loadbalancer.server.port=5678'
      - 'traefik.http.middlewares.compress.compress=true'
      - 'traefik.http.routers.dev.middlewares=compress@docker'

      - 'traefik.http.routers.dev-vite.rule=Host(`${DOMAIN}`)'
      - 'traefik.http.routers.dev-vite.service=dev-vite'
      - 'traefik.http.routers.dev-vite.entrypoints=ws'
      - 'traefik.http.services.dev-vite.loadbalancer.server.port=12345'

  # This runs the database that everything else connects to
  db:
    image: postgres:13
    env_file:
      - docker/.env

    # Unlike above, the Postgres image cannot start as our user account
    # otherwise we get permission denied errors. So this one has to run as
    # root. :(
    #
    # user: $UID

    working_dir: /

    volumes:
      - db-volume:/var/lib/postgresql/data
      - ./data:/data
    ports:
      - '6543:5432'
    restart: unless-stopped
    networks:
      - default
    command: postgres -c logging_collector=on -c log_destination=stderr -c
      log_directory=/var/lib/postgresql/data/logs -c log_rotation_age=60 -c
      log_truncate_on_rotation=on -c log_filename=server_log.hour.%H%M

  # Local S3 ish for file store
  minio:
    image: minio/minio
    restart: unless-stopped
    volumes:
      - minio-data:/data
    # ports:
    #   - "9000:9000"
    #   - "9001:9001"
    env_file:
      - docker/.env
    environment:
      - MINIO_BROWSER_REDIRECT_URL=http://console.media.${DOMAIN}
    working_dir: /work
    networks:
      - default
    command: server --console-address ":9001" /data
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.minio.rule=Host(`media.${DOMAIN}`)'
      - 'traefik.http.routers.minio.entrypoints=web'
      - 'traefik.http.routers.minio.service=minio'
      - 'traefik.http.services.minio.loadbalancer.server.port=9000'

      - 'traefik.http.routers.minio-console.rule=Host(`console.media.${DOMAIN}`)'
      - 'traefik.http.routers.minio-console.service=minio-console'
      - 'traefik.http.routers.minio-console.entrypoints=web'
      - 'traefik.http.services.minio-console.loadbalancer.server.port=9001'

  imgproxy:
    image: darthsim/imgproxy:latest
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'imgproxy', 'health']
    env_file:
      - .env
    networks:
      - default
    environment:
      PORT: 8080
      # IMGPROXY_LOG_LEVEL: "warn"
      # IMGPROXY_ENABLE_DEBUG_HEADERS: "false"
      # IMGPROXY_DEVELOPMENT_ERRORS_MODE: "false"
      # IMGPROXY_REPORT_DOWNLOADING_ERRORS: "false"
      IMGPROXY_MAX_SRC_RESOLUTION: 50
      IMGPROXY_MAX_SRC_FILE_SIZE: 20971520 # 20MB
      IMGPROXY_TTL: 352800 # client-side cache time is 1 week
      IMGPROXY_FORMAT_QUALITY: 'jpeg=80,webp=70,avif=50'
      # IMGPROXY_SIGNATURE_SIZE: 32
      IMGPROXY_USE_S3: 'true'
      IMGPROXY_S3_REGION: 'test'
      IMGPROXY_S3_ENDPOINT: 'http://minio:9000'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.img.rule=Host(`img.${DOMAIN}`)'
      - 'traefik.http.routers.img.entrypoints=web'
      - 'traefik.http.routers.img.service=img'
      - 'traefik.http.services.img.loadbalancer.server.port=8080'

  traefik:
    image: 'traefik:v2.5'
    restart: unless-stopped
    command:
      - '--log.level=DEBUG'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.ws.address=:12345'
    ports:
      - '80:80'
      - '12345:12345'
      - '8080:8080'
    volumes:
      - '$XDG_RUNTIME_DIR/docker.sock:/var/run/docker.sock:ro'

networks:
  default:
    # No metadata required right now.

volumes:
  # Postgres' data
  db-volume:

  # minio data
  minio-data:

  # Node modules
  nm_root:
  nm_app_admin:
  nm_app_client:
  nm_app_config:
  nm_app_db:
  nm_app_graphql:
  nm_app_server:
  # used for keeeping vscode-extensions while rebuilding
  # vscode-extensions:
